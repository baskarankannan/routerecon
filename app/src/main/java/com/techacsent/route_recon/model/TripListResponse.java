package com.techacsent.route_recon.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.List;

public class TripListResponse implements Parcelable {


    /**
     * list : [{"id":"414","tripId":"1557888658481","refStartpointId":"3133","refEndpointId":"3134","tripName":"New","tripDescription":null,"beginTime":"2019-05-17 12:55:00","endTime":"2019-05-18 12:55:00","creationDate":"2019-05-15 02:51:00","updationDate":"2019-05-15 02:51:00","startPoint":{"id":"3133","refTripId":"414","lat":23.810331344604,"long":90.412521362305,"type":1,"address":"Dhaka, Bangladesh","fullAddress":null},"endPoint":{"id":"3134","refTripId":"414","lat":22.356851577759,"long":91.783180236816,"type":1,"address":"Chittagong, Bangladesh","fullAddress":null},"wayPoints":[],"points":[],"markers":[{"id":"2350","userId":"6","refTripId":"414","markType":4,"lat":23.81069198,"long":90.41236715,"radius":0,"address":"517/3 Lane - 10, Dhaka, Bangladesh","fullAddress":"517/3 Lane - 10, Dhaka, Bangladesh,Dhaka,Bangladesh","description":"demo","tripSpecific":1,"landmarkImage":[],"locations":[{"lat":23.81069198,"long":90.41236715},{"lat":23.81001978,"long":90.41228056},{"lat":23.81017638,"long":90.41345178}]}],"reports":[],"friendShared":"5","friendAttend":"1","tripJson":"b3NnbGxAbX1pbWtEb0BtYUBqXXNBYl1pQmxEb0B2SXNDQ3RUYUJ4T2VEYEt7RWBHa0psSmVQfEtj\nU2RMe0xiRGtHP21LfEB5THxBe1RsR3dBZEF7R2pOZ0dqT3dDfENvV3hYd0F0QGlCUndUZkN5VGxD\neVx0RndCRGFBSm9AdEBxQG5BX0NsRHFUdlFxUXZMfUl0RmRJclhsRnJQbkJwRmZCZkVuQ3RFfkRg\nRmxQaFZ2RWBJYkZ+SHJEdkhwRHhIaF1qeEBiSWZPdEdgS2pJdEx6W3BiQGBqQHZvQFVoSHRqQG5M\nbGBAeEZ4ekF6T2RrQXxKfktmSXBrQX5IYHpAYkl2bEJ6Un5wQGZHbG9CcE1kbEFwTm5LZEF8eUJg\nU2JIdkB0cUN4V2xEYEBsYEB8RGRPekFqb0J6UmRBSmJNbkF4Q1hoR25AdG9AeEZ8RWBAYHdDbFdg\naEZoZkBgUU9oe0B0SGx9QGxJZHxAbEliRWRAcHpAdEl2V3hCYkJMflB6QXJhQW5JZERYfERQYEhK\ndkRcdnZAd0ZoYkBlRmJZe0VmWHlGfFl5S2xWdUpsTXlGYFBtSWROX0pyWXNTdEdrRXBMfUhmbEBx\nYkB6SntGZEZfQ3xOa0R2Z0BxR3JEaUByRV9AdEs/ZkZCdklQelV+QnJTZkJ8dUBuSH5QbEF+cEF+\nTH5sQGJHcGFAdER6c0FqTGJ5QHZKaEFlQmJCZ0FwQmFAdkJEbkBSfkBYekFyQWJBdkJKfEBqZEFi\nSXR2QHpHdFlmQ3puQXJMcHBBaEt4cUF2S3pEVGBAdUF0QGVBZkFxQHJBV3JBQnBBXmJBdkBQVE5Y\nbGdAe1FsaEB1UnpPZUdkSnlDYktzRWhWZ0x6VWdMekp1RXRNb0h4R3VEbEN5QWpMcUdkS19GfmpB\nc21AYlJjSnpaZ09mdUBxX0BmbUBpWnJUa0xySXtFbEl5Rj9PP09Qc0FiQGlBdkB5QG1EcVB5RF9R\nZURpTXlDfUxnQ2NMcUFhSGFBeUd7QHVMTWdJRGNNV31OTm1MWm9MZkBxSm5AZ0poQF9HbEF3SGhB\nZ0duQnFJfkNpTGZFZ016QV9FbkJ5RWJEZUhoRWdIckVzSGZYZV9Abkh5THRDfURwQ3dEakR7RH5E\nd0VuRXdFZERfRXJAfUB8R29Jfkx9TWRZbVt0RmNJYkl7TWpVX2VAckZzSmpEe0d6QmlEbkprTXRA\nX0FsUWNYbGlAd3xAekZzSW5Hd0l2RHdFZFNfVnBMX1JwT2FXZlBlV25GaUl2R29LdkltTmZDa0Vw\nSGFMcktjUHBTbVhmW3NhQHhcbWtAfFdzX0BkWmFgQGpEeUV0QmFDdkV4QnpgRGp4QXBBaEBgRXhC\nZHhAbGBAfmJBcmdAakV6RHZGaEdkVnJWalNyUWJJZEhmUXZMfFN8Snpedk54VmpHak90Q3JPakB6\nW2BBZldmQHJXQXhcTHJEQmxXRnJXQWRuQD9+a0BOdkhFeGZAaUB2V0hkbEBaZEVCakhkQmREZEJk\nRmBDYEBaZEl2SGRNfEV6R2BCdEZmQGBNUnBgQmpGYEVzQGpFeU9yRl9TfkRnTXhIY1RiSmlVakR3\nTHhBeUlwQWNPdkBlSH5EeW5AcENnW3pLa2NCbkJ5SmZBZUh8QXdGfEB3QmpAa0BwQGlAakBZckBb\nbkBPakBRakBXeEBVZkFDeEtyQWBObEN4TmpCdEpgQXRKQmxXd0ByUV9Cck9vQ3hUc0N2TXlBbER5\nQHBDY0FoQmdBZkZfQ2pDc0FgR3lFZkh9RXBPe0piQ2lDZkxrSX5hQHlYYEpvRnRWaVB2RXlEbEVx\nRXJCaUNkQn1DeEl5UWhKcU9kU3Fdakd7THRJd1FuRX1MZEV9UHpReW9AaENvSXpEX0twRWtMbk1l\nVGZmQX1jQnpTX11wRH1GalhlZkB4XnFwQHhGZUtuR3dNZEZ5TmBEY0xkRWVRbk1fcEB2WmtoQnxB\nZUpmR3NbekRzU35Ed1FgRV9PYkV1TWhIY1RmTHtbcE5xX0BoVnVvQHZ6QHd4QnxHaVB0RW1NfERh\nTmBHd1FsS3VbfEdzUnxIb1NkRXdJfFJlZkBsTl9aeE9zYEBoRG9KckZlU3RNbWhAZFJ5bUBuZkBt\ncEFyTndfQG5jQG1zQWhEd0pyTW1fQG5Se2ZAbkhzUmhlQGtxQXJBeUNgS3lWYFd5bUB+Wnl6QHZK\nfVZqVWFvQHhLd1Z0XnVgQX5SYWpAYFBtZEB0S2VYamdAcXNBdHNAcWxCdE1rXn5Ma1t+XXliQWRL\ndVZuYUBxZ0F4YUBjZUF2YEBzZUFsWG10QGRLeVlsTm9gQHZNbWFAaFBjbkB8SWFlQGpGdWtAeENn\nXWpDa3FAcEFrZkBoQF9dRmthQFtrVG9AYV53Ql9qQHlBb15rRHNrQHFPY31Cb0Z5e0B1RH1cZUJj\nVXFBZVVlQG1UU2FPaUNfYEB5R29oQW1Dd2RAY0RhZ0BtQ29jQHtDZ2ZAdURjc0BxQ2VnQHdEX3NA\nZ0RjaUBrQWtQZ0JxW3lCbVh5QWdZdUJrYEBzR3FkQXtEdWhAb0JhbEBtSW14QXdCaV1lQWdVcUxn\ndEJ7QXNbZ1B5ZEN7QHtMbUJxWHtCX19Ac0tnZ0J7Q2dnQHtAaVd3QW1We0NxZkBvR29nQWVFfWpA\neUxnbEB9QndJe1pvZUFvS19fQG9iQHN4QWlQb2ZAdV1hd0B1ZUFneEFvcUB9fEBncUB3fUB1T2tT\naUVfRntvQWlgQm9uQW1iQntGY05nS2dSfUxrU2NJc01tR2dSZ0NhTHVBcUpvQXlIX0FzR3lAe1BQ\neVRwQV9TckFfU3ZDX1N+RGFTZEh9UWRHcUtoVWlcalZhW2p1QHFkQWhTbVlgU2dXdE95U3Z5QHdn\nQWRBeUFqXmtoQGZ3QHljQXRNaVFqaUB1c0BqdEB9YkF0YUBjaUB0VXFdcHJDb3pEfGZBcXZBZGtB\ncXtBclBvXnBNfVtsT2dzQHJEdVFgUnF9QGxRc19BbkRpT35JbWJAZEl7YEBwRG1RbEFnR3hJdWFA\nbk5zY0B2RndMZEZnSmBJaUpsSnFJckNhRGxJbUpmSmdMZndBX3NBZmxAYWhAemxAbWhAdl1lWmpC\nd0FkaUB7ZEBydkBpckBmWntYemRAd2FAdk99S2ZTX0t+bEFtaEBmeUFzbEBgRXlCam5Ab1hgbEFf\naEByb0FlakB0dkF9bUBqV2tLemhBd2VAbFFpSXpwQWlqQH51QG9bdm5AaVdyYkFfYkB8UF9JZmZE\nY3RBemlAX1RobEB9V2ZhQm9yQGxhQGFSbGJAX1dmXHVYZFpxXWBaaWNAaFN7YEBsUHlbYGFAc2pB\nYGVAfWlBaE11VH5iQGN2QGpjQG96QGh3QWd8Qn5Pd1dkZUB7fEB+aEFlakJ0eEB1eEFgTG1UZmhA\nZWpBYmxBb2RDdGBBe2lCcmhAbWZBZGJAX3hAfEZpS2BedXJAdGNBYW1CaFhtW35Cc0J2VWNQZmJA\nfVVkb0lnckR2bkBvWW5ddU5wcUBjWXhwQHtYZlV9SHRhQHFRbFJrSX5QZ0pkU3VMfE11THBQe1Bw\nW19jQGpKdUx2aUBxc0BwZUBxbEBsbEB1dEBkeUF7b0JsdUBvYEF6UXlSbFJ1TnJQY0twV2NPZmdF\nd35CfF9CY35AeGJDb3NBeElpRmxYZU9mYEBrVmRnQG9WcntBd3tAfkZtQ2ZYcU90V3FRYExhR3BL\nX0Z0a0BtVWhjQHVUanVAZVpwZUBpSGxWYUR0akBvQmx0QG1BelVjQW5UaUF2WmdCaFFfRGxmQH1J\nbF57S25+QG9dcHxAX112fEBrXX57QHlcYnxAcVxwcUZpdEJ2XWlPdExvSWxKeUloT3dRdE1zUXRI\nbU5sSG1NYEZrT2hIb1FkRWlMZGhAd19CcFh9eEBoWmt2QHxReV5qUGlXZEFhQmhiQHtqQHZkQGds\nQGxmQHVtQHp+QWlxQmB1QHV8QHRSd1JiaEFxZEFkZUBvY0BwY0JlfEFwcEJrb0JwSGNIbm9AX21A\neFttWmZdeVtybEB9aUBgW3FYeGBAc19AZGdAc2dAdGhBfWZBYnlAdXZAdm5Ab2xAYElxSHh0QG1x\nQGJFeUN2YUBnWXZ8QGthQH5Jb0V+Wm9NfmBAYVF2bEFla0B4Y0J5dUBqeEBxX0B0ckBpWnBGeUJw\nc0B5XWRkQm11QHZhQG9RdEdzQ35qQHNXaG9Ae1l6VmdMdnxBe3NAcmBAc1J+UXFNYElnRmRiQHVl\nQGhEaUV4ekBrZkF2S2NOemVAe2xAamZAY2pAZnFAfXhAeFNlVnBXcVpkYEBrZkBwVXlacEd9SXJE\nZ0ZybUBrdEBwfkFpa0J4YkJvc0JyT29Sdm9Ba3tBdF9Ae2RAbmhAX29AfkRfRmxPbVNsZ0B1akBs\nfkB9akFoaUJhe0JmdkJpbENkUW9SaEp7THBoQGNyQGx1QGV9QHpGeUdqbUBlc0B0WF9caERhRWhc\ndV5ibENnfUNkaEFtbUFkZUF1bUFqfkB5Y0FyekBvYEF0d0BtfEBodkBrfkB2ckBld0B2cEB3eEB6\nT3NQdlNzVHx8QHtkQWpgQHNhQGBOYVB0TV9SbFF9XnZGc096RWdRekVvWHJBb01yQGVOZEBfX0Bp\nQGNgQG1AZVh3RWFiQmdFc2NCcVBhe0d5SWNyRGtIa3pDX0VvdUFvQ3VqQXNCaWdBdUtraURpRn14\nQG9Ec2tAc0FtaUBIbVRnQHtUZ0BhSHNEc2RBbUhndEFjRWNba0JvTnNJbWRAe09rd0BhU3N3QG9r\nQGFrQl9fQG9qQVd3QXtBY0ljQWFPR3lbfkB5WGJDYV10RmtWbkd5UmJ9QGFlQ2B4QG9uQnZ7QGt6\nQmZdd2NBYFtzZUFgZEBlYUJmSmllQH5Ee2lAbkBpdkA/dXZAZ0JvY0FzRndjQXlCZ2ZAYUZtdkBf\nQ3doQHtEaXFGbUJhcURpRXFnQnNNZ2lDe0ttdEJtR19oQXVAYWFBd0BtaUFCZWxBZUJzcERzRGtt\nQmdLfW9CX0VvaEFXbXVBVm9uQ0JjTXNGY3RDR3dBX0plfkJhQXFXa0N1fEJdYVlXZVJlQXNyQF9C\nbXFAdUVxfEB5RG1sQHlCY1lnQmVXaUV1aEBjTHl7QXNFcXFAcEFxdEBqSW9mQnpGb2BBZERnZUB6\nQWFUfklpc0BkTmV8QGpFcWJAcEB1UklxU21NfX5CX0BxY0FRa2hAdEVlZUhxSWN0RWtJd3BBa2NA\nZXNFX0VnYEBlVmdfQ19adXJDd0V5aUBzSG17QGtLfWNBb0lvZ0FnRmNxQGVRZW9BY1Z1b0FvZEB1\nY0NvQntKaURzUWFFY1VZe0FtRGlXZ0BzRGdCa1hFa050QG9dakNjWXhGcVluUnF1QHZDX0xsW21s\nQXpCdUlsSHtaYkVpUmRKbVRkR21MbkJ3RGZoQWlxQXxfQHVhQHxgQGNjQHxed2JAel1jZkBudUBt\nfEByV3dabEFfQnxuQXlkQnhwRGN1RWB0QXdoQnJhQXlxQWBZX3NAaFt5eUF+TGdwQG5MX3NAfk1h\ndkB+T3l8QG5Yc3FBelljYkJ0aUBrZER2ZEBhZEN6bEB7e0J4Wl9lQW5YdX5AcEdhWHhMX2dAeG9A\neXlCZlNzdUB2VH1zQGhjQGNuQXRLaVVoZ0BlZkFoTn1ZbkppU3RUYWBAbmRBe3dCYnNAaXVBdmZA\ncX1AaEdlTGpzQXlpQ2poQXdsQ2hlQWl7Q3ZMZ2ZAaEVha0BDaWZAQ3lsQHNDb35BZkR1YEJuQnN3\nQGRHc2RDakVhYURpQHVoQ2NHeWZEbUJ9ZkFpS2t4Q2dId3FCc0R7ckJVbX1AYkZzfEF2THl5QnpE\nZ2ZCTmNHaEZvYUR4RHFuQXhLb2tBblJ7bEFqQmFcXWNcd0R5aUBzRnNoQGFHZWdAaURxZ0BxQHdj\nQEBhY0BXa2tCQ3lxQnxAZW1BckN5bEFgTH11QX5PY3VBYGlAc2BEZmRAZWpDZENzT3BFaVtwR3lj\nQHhAfUZgRmFeek1zYEFiRXlcakR5V2JAYUNwS2t0QHROfX5AZkZtYUBwYkB1Z0RwakBxdEVsQndS\nekF9T2BGcXhAYkBxR2REeWlAWGVKZEZ5YUJuS3F4QW5EdWZATHFOekB3ZUBVc2RBakJzd0B0SmN0\nQ2ZEd3hAYkB1S2RHb3tAbEFzSnRQZ2tBcFd9Y0JmY0Btd0N6RV9cZnFAfWlFYnJAe31FZEdtYkB+\nQm9PelljbkJiS2VhQWRBZU5yQW9RZEJtXn5Cc1JqQWtJYkNlUWpHd1liTG9oQHBEdVB4d0B5ckRs\nV3NsQXJDd0xiSXdccF51bEF4T2NvQGpLZ2JAfl1nd0FsWWdqQWJFcVF8QntJbF1neEFwT29wQH5l\nQV9zRXJSaWFCZEFtTWBAX0ZMc1RMZ29AbUFjaEBnQ2teYUJhUGVGcWBAeURvWnlBeU5zT2t3QXdE\nZV1jQnNdW31PVHdPfEB5XXBCX1JwRmtnQHJIX1x6fkB9Y0V+Umt3QGZ8QG9rRGhFY09sSmVccGhB\nd29EbFVpbUB0YUNzbEdkXF9xQGRLcVdoR29TaEVnVWxDb1ZyQWNad0NlbkF9RHtsQXlEZ3RBZkN3\naEBoR3NgQHhabX1Abm5Ae29BdlRra0B+THtwQH5Ba1xIe15nQn1rQHFKY3ZBbVVhZ0J7VGlkQm1P\nd2RCdUR7YUJXcX5FZUV5fUViRGl+QHRWaXBCfEpndUBkQndZakB1XHlAaVt1Qm1cdUNjZ0JoSHFm\nSmBAeW5BdEZ5Z0BsSmVmQGRpQGdtQXpzQHVsQXJ8QHdzQXRiQHFoQGBQZ1R+S3NVck5fYkB2SXdu\nQHZCY3VCeEFjZEJmRG95QmREY3ZCbkJpeEFSeV1lQF9IW3FId0FjT2VFc1ZvSX1cYVZ9ckBxQG9C\nYUpjWn1He1lhUV92QGlOb3hAY0Z1X0FoRXt7QHJOZ3pAcEJ9S2pKbWpAeEZ1aEBwRX1mQWxDaWNB\nekJnbUJReWtAX0F3a0BlSW18Q3dMZWJFcUh5YkJhQnddY0FvVHtEfW5AcUZ7bUB3RmFrQF9BfU55\nT29uQnVCaVlfQG9LUHNGRWtwQEFnQ1J7eEBGc0lQc1xXe2JAQmtlQGtAZ2NAa0J9cUBXZUtBeURz\nQl9iQGtAZWJARW9bakJna0BuQW1UdEBtV0lpT1VzS0VjQ3dAfVBpQmVUb01rZ0F7T2NxQWFXZW5C\nY0RpYkB7Q29SeUB1UWFAeU1cYUxkQH1NeEFxTWxIb19AYGVAc3dCeF9Aa19CZEl3WnZDcUx8R2FY\nZkh3WWJHZVR4R2dRZkdjTmhJbU5mTn1VclB7VXxJeUhmSGtGflF1TmpXaU5sR3tDYEprRHpEeUFg\nS3VEdkZ1QXZLdUJmVndFenFAd05sX0JfXmx6RHl5QH59QGlSYGJBaVRsY0NfaUBodkB5T3J1QF9Q\nfHxAZVJ4fkB5U2J7QHNRbndAcU9oWGFHdlZ7SHxVdUh2cEZ7c0JyeEB5WnhlQndwQH5zQHFYeG5A\nbVZ6Z0FnYkB8a0FpZEBkZEFjX0B8QWlAcGVAdU9wWWlKcGlGX2NCamBAeUxsY0FfXHZlQXlcdGlD\nX3pAdGFBb1puX0J7Z0Bod0FvY0B2ZkFhW3BmQG9Lel9AYUlqb0Nlb0B6WGFKYlh3THxTcU1yUmFP\ndE55TmhMdU12QWNCaExnUWxKaVJkUWFhQGJjQWlwQ2BtQGlfQn5Yc3dAcE99YkB+W298QHxadWBB\ncFpje0BuXXlhQXJFZUp6VXtyQGJ7QHV3QmRdZXpAdk9fYEB4QmFGfElzV2xId09wSW1SelRtaEB+\nc0B1fkFseUBva0J+YEJ3dkRqekB1bUJwXXVlQXBJZV5uSV9hQG5Nc2RBdEx3bEJ6ZEB9bkh4akBr\naUpmQGNKZkJnXHRSc3NDcGdAfWxJZkFtUGZHY35Aek1ncUJqRH1XdERpVWxDZU9uQWNIfkZfV3pJ\nbVx+THFdbFlfbEB6VWFgQHJWZVx0dEBzdkB0ekBhX0F+XGVfQGpfQ2NlQ2RSfVJ6ZkJja0J6RmdH\nZkNtQ3JvQHVyQHJwQHtyQGRtQGtvQHh4QH17QHhGY0dgVXlVfmJAd2RAaGdAZWVAdF15WGZIeUZu\ndkBjbUBodEBra0B4YEJnbkFia0B3YkB4ekFtaUF2UXtOcGpCd3lBYGNCX3FBZmlEb2pDbGZCaXVB\neHFAfWdAbmpAZ2JAYmVAY11gbUF3YUF8ZUBfXWJnQHNeZGtBX3ZAbE1xR3hgQWttQG5iRGFyQnh5\nQHdnQHxlQWNwQHB9Q31uQmxVeU52Z0BpW3JjQHVYaGhBeXJAcHBBc3RAeHdBe3NAbGVDYW5BemBB\ne2VAZG5AbVpwUGVJclV7S3hYcU52bkBtV2p0QHlXYGNAY1J8Y0BjVWZjQW9vQGhoQGViQGJkQHFh\nQHJzQG1oQHpkQGtbbkhhRnp0QHFnQGxsQ3dgQmRHb0Vye0J9YEJ2Z0FvckB6Z0FnbEBoWV9PeFl3\nTmZYdU90WV9TZG9BZ2VBfnpCeXNCdnJCYWlCaFhlVnRkQG9hQGJJYUhsaER7dkN8bUBxZUBqZUJx\naEF8WXNQbmRDaXZBZH1BZX1AamNBX3BAbGhEZ2hDbm9DfXxBYGRCZ3xAZGVBX2JAcHxAdVhoeENr\nd0B8fkFfXnZqQW9VZHZBcVZ6cEBjTHx3QGlQYFplSn5yQGdaeGFCYXRAen5CbWVBdmxBYWlAYG1A\ncVFyd0B5UG51RH1vQH5tQXFPcmhDX1N+U3FCdGpAd0h6ZkFrVnBtQntjQGxpQ19tQG5rQHtNeGRB\nX1t6a0BnU2BhQGdNfFtzTHBUcUtqU3FNdld9U3RQeVJye0FfeUJgXWtnQHJgQHdeZGBAc1Z4cEB7\nWGptQWNnQHJrQnV2QHpkRHt0QXp2QF9YbF9AdUp6YkB7S2pkQGdKfk1vQ2BgQG9KYGJAc050Z0Bn\nVGJyQF9dfnRAd1t4W2FPalhxSXZbdUZmT3VBYm9AfUZmbEJ5TXJtQntOemxBa0pqYUJrTXRnQH1E\nYlRhQmJ6QnVGaHdBb0RmdUBhSGx0Qm9mQG5ZfUdwYUBjTmRmQmNsQHZLcURsT2dGdGdAY1J8ZUF3\nW2hoQHFNdnhBc158b0BnUHhqQmloQGJKZ0N8dEBxUXJhQHlKZmBAa0ZuQk1iaUBvRHpkQHlAemdB\nQmZ9QWVBekBBbFpTan1DbEFsTER+cUBjQmRPP2hER3xdfUJ6U3VBemFAb0Nic0FnUGxmQGtHdHNA\nZUpsZ0FrTnpsQHFCfm5BcEBwbUN2QX5QSnJcUnxsQF9AdnBAfUVya0B1SGh7QHtNaHxAeU9oY0Jx\nYkB4aUB1TnZRY0RiW2tFdGlBaUR6ZEBpRHpqQGNIfnhEeV5iXntEdF9BZ0tkaUJ1SX56SWl8QGRX\nZ0N4cUBvRXZAR3RyQXVJemZAY0RyRFdufERvY0BkTXNAcnFBbUhwR3tAeHJBYVFmTG1DdHxAbVtq\nZ0FrX0BweEB9WWBgQHVKbkNtQGBOdUNuWnFDfFNHfmNAcEBqV2BEZkh6QHhGckBibkBkTmpFfkBw\na0F4VmxcckN4W3BCaltLZnlAa0RkR1l+Y0J9SGZHWWZhQmlDeGlDY0VmekJtRHJBQ3hoQnNDeGNA\nX0FmT1tgZEJhQ3RMUXxvQWVBcGRAX0BodEBtQHxvQGlAdntFbUhwbkBnQmRvQHlIcmtBYVxkZkR1\nZUFqdkV1aUF4e0B3WGJ9QF9mQGR0QXFwQG5gQGNKemZAe0N6aEBPcnNAaUBsY0JyQXJ1Q3xIYmxB\nbEl0Z0BgRXRkQGBBYlA/eFBnQGhlQGNFYmBEdWJAcndDdV5wcUFjVGRjQ3F0QHRtQ2N5QGhzRGdw\nQWpHc0JiakVndUFiakJldEBkdkF7cEBmfURneUJ2bkBpXHZ+Q3FgQm5lRG97QWJ0RmNlQ3RxQ2lw\nQX5jR2NnQ3ZyQ2VxQWBmRHd1QXBgRHl7QXx2QnFjQWRkQ3dtQXxiRWlxQm56QXd3QHB2QmtkQWRs\nQWttQG51QG1fQGxhQHVTfnRAbV1sTV9Ibl9BX2dAamRAa1VsW2lQdGZAaVZ2VnVLflZrSXxOa0Nk\nTGlAZm9Ae0Z4ZEB1RGpZe0NiVWdFfF1tSHp1QHdUdkJtQHpzQGlSZGVBbVl0X0B3SHpSbUNsWGNA\nemBAP2JtQXhCbmlAdkF6WkR2ZEBvQnBjQGVEcF9Ac0V+TnlDfnREY29AcnZBa1ZyX0draUF+fkB7\nUnBrQXdRanlAfUlscUBxRnBNbUBuWXNBZm1AX0J6Y0FhQmJ4Q2lGdlBbdn5BdUN6UnNEZEtvQWxa\nWWhiQHtBfEVHclFVZG9AZ0FiUGxCcEhsQHhxQGFBZmlBdUJiSEFkfkFtQ3BrRXJGcHJDbEVmfUNg\nR3p1QGxAdGFAa0JqXGdFeGBAaUhoZkB1TnRlQGlUcldjT35db1d8VWtWdGNAb2hAaHdAaWJBfGhB\naXZBcmNBX3BBaH1BX29CbHZCd2hDcnpBb2VCaGZBZ3lBfHhAfWVBamlBZXdBenFAfXlAcntAZWlB\ndGpBe2FCem9BdXNCcF5lcUB4dEN5eEVoe0FxZ0N8bUJ1YUR0eUR5cEdgR3lLdm9BbXRCcGdAYXhA\nZGZAe3FAellpXnZpQX1tQXBxQWVxQWhrQ2NvQ2Rdd15+bUJrcEJqU3NRZFp5V3xsQmVuQn55RXN4\nRWpxQWtuQWZ2SV95SXZnQGdrQGJjQHFtQHB8QHt5QX5sQGdiQW5mQXFnQnJxQGtqQXphQGd9QG5x\nQG1rQm5oQWt6Q3pmQHNlQX5TZV9AdmFAX29AZHJCbXhDfGJAcW5AfmBAe21AZk5tVWxNYVZqU2tk\nQG5hQGFrQWZPc19AalBvXnJPbVxoT31YcmxAZ2VBdGxAY2NBfmxFbXpIaGdAZWRBfGlAYXJBdndB\nb3FEZmRBfWdDcEx3WXhqQX12Q2BRe21AZElvYkBoS3t1QH5Ec21AWHdrQFtpakB5QnV4QG9EZV9D\ncUp9e0V3RXl9QmtFa29Da0JtYUFrQm90QGdDcXNAeUVpcUBzRm9uQF9Ie21AaVZjcEJfVXllQm1I\neX1Aa0Jtb0BAdWRBYEF7bkBiQWtwQGpCeW5BdEZjeENuSXNhRmpBfX5AfkF3d0BgQm1vQWJDd1x+\nRHVdeEZ3WWBOYWhAaEhhUXxLc1RkT2VZbkhrS3ZIa0l+WW9ZbFdnVWxoQWNgQWxEfUNydUBhbEBg\nTHlIfkxrR2ZhQGlRbnhBX2xAemNEY3VBfnFCaXpAeHVBe29AcnpBX31AemBCe2BBYl9CZWJBenBA\ndV1kbkBpWH55THlxRWJvTnt2RmBzQnt4QHhsS29lRWZ7SHt7Q3R+QW9mQHx5QHFSbH1AY09uX0Jp\nU2R7QntSandAY0pwYkBzR35hQF9KdHFHZXhBeHNFb2hBcndFcXxAcHlFb2NBYnJCZ2RAZnJCY2hA\nZmhGfXJBcH1NX2pEZHJAcU5ockBnSnJwQWFKdHVBdURsYkl3VHhxQWlEdHVBfUN8ZEBxQmRtQHNB\ndGhAYUJ2YkBtRGZcZ0VqaEB1S25qQWdaZnlCd2tAaH1AaVZ4eUB9UmBlQG9NZGZAYUxuVF9EelNj\nQXJqQ21EbmJCeURmbEB3RH5YZUN8VHVDcFN1Q3pIa0FiakF5UHBTb0NsaUNhX0BkS3FBdmxCfVdq\nX0B7R2xaYUdocUB5UWxZdUpyYUFlXXhfQXFYfmRAb01mdUBvUXZOX0R6SGlCbFdjR3Raa0h2WWlI\nZGBBcVR2cUBnUGZNe0N4TmVEcE5rQ2JOX0NkUHtCdmBBYUx8WmdEeFVpQ2p1QGtKbmdCZVl+YEVh\ncUBiTn1CZGRAdUtgZEBjUGZiQV9oQHJVb01iU3tLfE9lSXZHc0RqT2tJflFvSGBZbUp6SG1CfElf\nQnBUY0R4SWdBbEphQXh7QnFWcGFAc0dmRHVAYGtAe0xucUFfWnRLa0NuYkBjS3hrQHVNcmdBe1Zu\nZ0BrT2BtQHVTfnRDYWZBfl9Bb2NAdmBBe2VAaF19UGZaY054Q3VBfmJAd1J6THtFek9hR2pkQGlR\nZmhCa3BAekVnQnhGdUJme0Nra0FkSXtDbklpRHpfQGtPdnhAeVtycEJ7eUB6SHtDZlNtSW5YaUt0\ndUBlWHRcZUtwT3tFfE1xRGRfQGFLfF5lSmJQX0Z0WWlLbk1rRm5MYUdqWGlPall3T2JaZU9+TnlH\naE5fR3xBa0B8Q2NBYE1fRmBTZUh4TGNFflptS3Z0QHFWaHZAdVhwQ3FBZl9AZVFsYUBpVXx+QHNq\nQHhReUtwZ0BxWm5hQHlXcmRAfVx+fUJpYkJ2eEFpZkFoRGdDYF9Ca2pBbnlAdXFAdl1pW3xPc05u\na0BhaEBia0BvZ0BsdEFhb0FkUX1QemBAc1t+YEBrWm5hQGNaaFVzUXpFe0R4RHdDZmdAeV54S2VJ\nbnJAYWhAbGJCb2tBaHZBa2NBZk9pS35TZU9wVXtPZEx9R2hFX0NwRl9EZFZnTmJzQGtbYnBAb1hk\nfEF9cEByZEBzU2ZmQH1TZm5Bb2RAekpxRHRZcUtqZ0BtUHhvQXNcakx7Q2JkQHtMemtAZ094SmtD\nYE17Q2ZVaUdsU21GeFZ9R35+QG1VelllR35EeUB6QmNAYEtzQWJvQH1IfFJrRGxUbUVofkBxVGBO\nbUNmcEBvTX54QHdPbltvSH5bc0hwbkV9aEFwaEFtVXJQa0RsS31DbkRjQXReYU14XmdQeHVBZXVA\nZkpfRmhfQF9Tak1xR3ZVcUxmZEB5WHZXcVBwWWlRaGpAd1luRWFDYGdCZXpAclVnTWZkQXFqQHpI\ncUV+dUFpeEB0Y0BpVWRfQGdRbmdAaVZ6U2dLcl17T3RMdUZ4YkJ9d0BqTWVHaGhAc1ZqbENtb0Fm\nfkJvZ0FiSmlFeGVAd1RiXHNPdHhAb19AcnlAeVx0eUBhXGBlRW9hQmZiRWFgQmhrQXtkQGBqQGdV\neG5AY1ZoZkJ9a0BwYkFzWX5qQmFoQHBbeUluS2FFcGpAYVRoSm1EclVtSnhwQGVYblZxSnpxQGFY\ndFJjSWBTeUtkU19NeFJrS2hDd0F0YEBnVG5Od0d4T29HYk15RWBTd0d4XX1LcFBfRnZPc0R2YkBh\nS3RgQHFMdn1Aa1l2Y0BlUGZlQHlOcGFAYU5uYUBrTH5jQHNMbFVlSGRlQHdNdk57RGp7QG9VanZD\nb3VAdHtBc19AaHNAY1JodEB9VHpjQH1PcmFAc1BiWHlLYGhAe1N4YEF7YEB4YEB3UHphQGtReHhA\ncWJAfmtBe3BAdkR3QmZpQHdaYFhtT2RZZ09ibUB9XGZDeUFkYUh1e0RgcEB1X0B0XG1PcE11RnJO\nfUZwVWtLflRxSnZZfUtgWHFLZGxAc1VwZ0BtVHpMfUV2dkF1akBmZUJxdkBmfEBpYEBuZkBtVWBp\nQG9WcHFBZ25AfHNAX11ieUB7X0B0W2FPYlx9Tmp4QG1fQH5ad09sSmNGbGRAaVZoZEB9VGJlQHNT\nYndAdVxgd0BrXH5dYU5kX0BxTnx7QGtcdlpxTXxbY1FueEBxZUB2Xn1Uel9Ab1RwTWtIfE5nSXpT\neUt4fkBnZEBkeUJpY0FsYEBhUWxMZUZ+WF9NeFlzSXBhQHdMWEliaEB5TmpYa0hsYEBhTXpiQHdM\ncmZAfU5oWWFJYFprSm5bc018X0BxUWJkQF9WZFxzVWhdX1t2T19OZFVtU2RPd09wVmtWbFdpV3RU\naVRmT3dMYk9nS3ZCc0FsUHFLZlpzUHZWa01mW19PelphTnBMe0Z2XH1OelRpSm5PZUlsV29LeFZr\nTHZNc0d8XnFPfFhxTX5cb09+S2dGeFNfSmBZeU1sY0B9UXJTZ0p8XmFTcmdAYVpoXHFUfGdAc1xq\nYUBlWGxXcVBgW2lSall1T2ZdZVJyXntSZlJjTGJJX0ZoXGVTcl9AeVV+T31KcGZAd1lsZEBfWW5i\nQHlXdF9Aa1V6ZUBzWnxnQGdbcFR5T25kQGNYdl1fUnBgQHtQbGVAfVNmZUBpVHBac1F0WXdQdFJz\nS2hrQGFQel9AbUpoZ0BjTXxTdUdia0BzUWxnQH1PdEl9Q2R1QGFWdnZAZ1hqWX1JemZAb090XHtL\ncFp7SmRcYU12W2lMfFNhSHZXb0liV2VJeGVAe094RX1BcmJAeVF0d0BzXHhjQGtPdFphS3p0QG1W\nbFV3SH5mQGVRfG9AdVRob0B7UWBgQGNMYlZ7SXphQHNNcHNAb1JqaUBtTmZ0QGVVYG9Ac1BmdEBx\nT3RmQGNKdmxAcUt2c0BnTX5yQH1OZHBAcU14a0FfVnJfQWNUcmtBaVV4fUB9UHZiQHVHenRAbU1y\nZUFjU25sQHtJem5Bc1ZydEFtU2JuQWNSbntAd05mcEBzT35lQGFPdHBAc1R6bEBvVHp4QG9caG9A\ndVx2WXFRbGdAaVlockBvYUB6ZkBlVnpkQGlZbl9Ab1lsW2lWaGdAY1lkXnVQfmRAcVNiaEBjVHZx\nQHFWdmxAYVJqc0B7VXJ8QHtWbndAa1V0ckBpUHp+QGNWbmZAd05qYUBnT25kQGlQZmVAZ1J+aUBl\nU2RlQGNRfHpAaVxiekBzWXxyQGVZenFAbVh6ZUB7UXRdbU5qY0B1UHJ7QH1cZmxAe1RyfUBpWX5z\nQGFXbmlAbVJgYkBhTmZvQGVUfnpEd2tBcHNDcXtAYn5Cc3lAan1CZXVAYEx9Q2B6QGtVbnlDZ2JB\naGxCe3NAbFN5SHRxRW9mQmhuQ2doQW5iQWFfQGJrQXFfQGpxQXtfQGx1QGFYYEx1RnRTY0tqUXdJ\nYnZAe2RAanpAc2RAbmVAeVNuW21OaH1AdVd8UGFGfGxAZ0x8Y0J9UnZjQGtGbmNDeVd4eUFlUHhf\nQWdLbnlBZVV4SHlBbnJAeU12V2dLblJ1SG5NZUZuU29JbkNlQWpBY0BiVmFKaFp1S2RWZUlsV2FJ\nelllSWxZeUdmV21GdlNjRnpRd0ViRntBYEhhQ3ZYaUtmW31MdFRxSmJWb0t0THtFbE1lRnBPfUR+\nV2tHbFZ7RXBUcUVoWX1Fbkx1QnZBV2RNe0JuUmVEbFp3RnJuQWVWamxAY0xqXH1JYmJAY1BiW3NM\nYmBAZU9mZ0B9T2BpQF9SYmtAY1J4YkBvTmJlQGNQYmZCY3JAdnJAa1hyaUB7U2xhQXtgQGhdd05q\neUBfX0BmVGNNdk97Rmpda016aEBvUX5qQGNSfENlQWJhQG9McnhAZVdsbEFpXnJnQG1OcnhAfVJk\nZEB3T2JacUpmYEB9TmZbfUx4akBzV2ZSa0liTHFFZEZzQXhCa0Bmd0BjVGxuQHdMemVAbUpwX0Bh\nSXxZdUh4ZEBhTHpPYURiWHtGdFRfRGZWdUNqWntDbFxxRW5LdUJmSmFCYE9jRHBcZUlsUmVGZlVt\nSGpTbUhiVHNHfFV7SGBca0lkX0B1S35eYUt0SXtDYFNrR3Rde0pkWGdHeFB3RXhLeUNgVX1Icl1n\nTWZWb0tsVHdJZkxvRXRFYUJqVnlIflBvRXpYY0hgX0BnTGBUX0h6VmNIZktvRGhNYUV+UHFGblB1\nRnhLdURgR3VCfklnRWhNZUZ6SG9Ebkp3RGhKe0V8SntGdEl7RWZIe0VySGtGdkh1RWBJcUV0RHVC\nZkFvQGRIa0V2RmdEdEV1Q25IcUV+RnVEaElzRnRHY0VoRWVDYEZ7QnpCX0J6SW1Gckd9RGpCYUFo\nQ3dBbEZrQ35Ie0VwR2tEZEBfQH5Ac0B8SGNFbEVlQ2hHb0RoQm1AfkhvRWBNbUdgRn1DdkRrQ3BF\ncUNgQXlAdEJnQWhEa0N0R2FHZklrSGRHcUZmRmtGdEVnRnxFbUd+RXtFbkNtQ3RGZUd8RGlFfkFl\nQnRHY0dgRW1FcERpRWBDcUJuRXlFZEhpSGpHa0h+R2NIakp7SWhVZ1ZwXF9dZElpSH5NZ0x8TnNK\nflFlTHpMYUhuU21LZFh3TWRaY052UXtHalVrSXxTb0l0THdFYl1nUXRHaURqZEB1WHhIZUZ4VmdP\nallfU2ZmQHFbbl9AZVhqW19UdFR3TWhWc01mT3VIdEllRGBGe0J6Y0B7TnRhQHdNdE15Q2xMZ0N+\nU31DdlxpRWZcfUVsTmlCZEVhQGJFdUBwTmlCflBvQ3BNX0JqR3VAckhpQWBHb0ByTHtBaEh1QWhF\nZUBwTW9CYk1lQnBPdUJ+R2lBZk13Qn5JY0JuTndDbkxnQmZNd0J4SXtBfkhfQnRLb0J0Q2VAdEdn\nQWZKYUJ6THFDaFRpRHBNbUJ8TGtCeEtpQmpIY0FyTV9CZktnQnJJcUFyTmlCbEtrQmROX0J6TGVC\ncE9rQmBQeUNmTWNCak59QnRJb0F4SWtCYkt7QXhQb0R+S29CZk11Qm5Ka0JsYkFzUXpsQHFLdFph\nRnhZZUZ+YEBhSG5qQGFKdFp5Rn5gQH1GfnBAe0dqSWNBbUZfekBuVXlAb0F7ZUBzQ2dpQGlVXklj\nQndAd0V9R2tiQGtHX0RfUGNWa0xtZkFzTGlyQGFAc0pyUGFBcE1UZEVqSHxHe0RqSFtyS2dAfF1J\nalw/cEd6QHRGYkFuR3RAZEV6QHRLbkFdfEV0QnJvQHZIbGhBZkJ8UnZJeHlAZEt6eEB6QnxRbkJg\nWnRqQGFKeE93RGZOY0Zsb0B3WH5bZU1sYEB9TXxqQHNRemZAfU98d0BxVmxqQHdRZEllRHxOeUdw\nT2tLblx7U3BoQG1cclthVWRda1d8dkBtaEBsakBfXWxzQHlhQHZ5QGdpQHxUc1ZiVXNZYlhlYkBg\nYkBfcEBoYEBtbkBmXmlhQGZZY1VqXGtUaEdfRXhmQHddald3VmReZWZAaF9AX2hAdFh1XWBPdVR2\nTmlSdmhAZWRAYlVnU3JOZ01kSWlIZk9lTGJYZ1J4SHFFamhAfV56TmdLdGdAa2NAbk11TWRUe1Zm\nUmlcZkxhTGpEZ0V2Q2VCeHFAZWJAcld3UmZgQF9WYFRlTnpNY0pkSn1HZGRAe1tsVHlPeFFlTmJB\nd0BmV3NTbEN5QW5DYUFkSHlCfnJBcV1Kd0BacUBkQGlAcEBZckBJaEBCZEBKYkBUXFpkRT94X0BP\ncHZAbEJsY0B6QGhVXGZUa0BmXWtEcFljRnREdUJIYUBSX0BWW1xTbkN9RHhHYU94Q2dIZkVhTWZJ\nd1d8RmNUYER9UmhBb0pDdUVIX2VASHtYekBxS3pBZ05gRGdKbERtSHZMYVB2SGNKaklfS3ZKcU1+\nQG5IZ0lwSmpDek1wRGJSeEFiUGZCaEliQnxWYkBsUWZFaG5C\n"},{"id":"426","tripId":"1557974364588","refStartpointId":"3112","refEndpointId":"3113","tripName":"Test","tripDescription":null,"beginTime":"2019-05-16 03:28:07","endTime":"2019-05-16 03:28:46","creationDate":"2019-05-16 02:39:26","updationDate":"2019-05-16 02:39:26","startPoint":{"id":"3112","refTripId":"426","lat":23.810331344604,"long":90.412521362305,"type":1,"address":"Dhaka, Bangladesh","fullAddress":"531 Road No 11, Dhaka, Bangladesh,Dhaka,Bangladesh"},"endPoint":{"id":"3113","refTripId":"426","lat":22.356851577759,"long":91.783180236816,"type":1,"address":"Chittagong, Bangladesh","fullAddress":"Port Connecting Rd, Chittagong, Bangladesh,Chittagong,Bangladesh"},"wayPoints":[],"points":[],"markers":[],"reports":[],"friendShared":"1","friendAttend":"1","tripJson":null},{"id":"428","tripId":"1557977499327","refStartpointId":"3131","refEndpointId":"3132","tripName":"Test1","tripDescription":null,"beginTime":"2019-05-16 03:32:58","endTime":"2019-05-16 03:33:35","creationDate":"2019-05-16 03:31:40","updationDate":"2019-05-16 03:31:40","startPoint":{"id":"3131","refTripId":"428","lat":23.810331344604,"long":90.412521362305,"type":1,"address":"Dhaka, Bangladesh","fullAddress":null},"endPoint":{"id":"3132","refTripId":"428","lat":22.356851577759,"long":91.783180236816,"type":1,"address":"Chittagong, Bangladesh","fullAddress":null},"wayPoints":[],"points":[],"markers":[{"id":"2386","userId":"6","refTripId":"428","markType":1,"lat":23.81344412,"long":90.41202968,"radius":0,"address":"324 Lane - 5, Dhaka, Bangladesh","fullAddress":"324 Lane - 5, Dhaka, Bangladesh,Dhaka,Bangladesh","description":"Description","tripSpecific":1,"landmarkImage":[],"locations":[]}],"reports":[],"friendShared":"1","friendAttend":"1","tripJson":"b3NnbGxAbX1pbWtEb0BtYUBqXXNBYl1pQmxEb0B2SXNDQ3RUYUJ4T2VEYEt7RWBHa0psSmVQfEtj\nU2RMe0xiRGtHP21LfEB5THxBe1RsR3dBZEF7R2pOZ0dqT3dDfENvV3hYd0F0QGlCUndUZkN5VGxD\neVx0RndCRGFBSm9AdEBxQG5BX0NsRHFUdlFxUXZMfUl0RmRJclhsRnJQbkJwRmZCZkVuQ3RFfkRg\nRmxQaFZ2RWBJYkZ+SHJEdkhwRHhIaF1qeEBiSWZPdEdgS2pJdEx6W3BiQGBqQHZvQFVoSHRqQG5M\nbGBAeEZ4ekF6T2RrQXxKfktmSXBrQX5IYHpAYkl2bEJ6Un5wQGZHbG9CcE1kbEFwTm5LZEF8eUJg\nU2JIdkB0cUN4V2xEYEBsYEB8RGRPekFqb0J6UmRBSmJNbkF4Q1hoR25AdG9AeEZ8RWBAYHdDbFdg\naEZoZkBgUU9oe0B0SGx9QGxJZHxAbEliRWRAcHpAdEl2V3hCYkJMflB6QXJhQW5JZERYfERQYEhK\ndkRcdnZAd0ZoYkBlRmJZe0VmWHlGfFl5S2xWdUpsTXlGYFBtSWROX0pyWXNTdEdrRXBMfUhmbEBx\nYkB6SntGZEZfQ3xOa0R2Z0BxR3JEaUByRV9AdEs/ZkZCdklQelV+QnJTZkJ8dUBuSH5QbEF+cEF+\nTH5sQGJHcGFAdER6c0FqTGJ5QHZKaEFlQmJCZ0FwQmFAdkJEbkBSfkBYekFyQWJBdkJKfEBqZEFi\nSXR2QHpHdFlmQ3puQXJMcHBBaEt4cUF2S3pEVGBAdUF0QGVBZkFxQHJBV3JBQnBBXmJBdkBQVE5Y\nbGdAe1FsaEB1UnpPZUdkSnlDYktzRWhWZ0x6VWdMekp1RXRNb0h4R3VEbEN5QWpMcUdkS19GfmpB\nc21AYlJjSnpaZ09mdUBxX0BmbUBpWnJUa0xySXtFbEl5Rj9PP09Qc0FiQGlBdkB5QG1EcVB5RF9R\nZURpTXlDfUxnQ2NMcUFhSGFBeUd7QHVMTWdJRGNNV31OTm1MWm9MZkBxSm5AZ0poQF9HbEF3SGhB\nZ0duQnFJfkNpTGZFZ016QV9FbkJ5RWJEZUhoRWdIckVzSGZYZV9Abkh5THRDfURwQ3dEakR7RH5E\nd0VuRXdFZERfRXJAfUB8R29Jfkx9TWRZbVt0RmNJYkl7TWpVX2VAckZzSmpEe0d6QmlEbkprTXRA\nX0FsUWNYbGlAd3xAekZzSW5Hd0l2RHdFZFNfVnBMX1JwT2FXZlBlV25GaUl2R29LdkltTmZDa0Vw\nSGFMcktjUHBTbVhmW3NhQHhcbWtAfFdzX0BkWmFgQGpEeUV0QmFDdkV4QnpgRGp4QXBBaEBgRXhC\nZHhAbGBAfmJBcmdAakV6RHZGaEdkVnJWalNyUWJJZEhmUXZMfFN8Snpedk54VmpHak90Q3JPakB6\nW2BBZldmQHJXQXhcTHJEQmxXRnJXQWRuQD9+a0BOdkhFeGZAaUB2V0hkbEBaZEVCakhkQmREZEJk\nRmBDYEBaZEl2SGRNfEV6R2BCdEZmQGBNUnBgQmpGYEVzQGpFeU9yRl9TfkRnTXhIY1RiSmlVakR3\nTHhBeUlwQWNPdkBlSH5EeW5AcENnW3pLa2NCbkJ5SmZBZUh8QXdGfEB3QmpAa0BwQGlAakBZckBb\nbkBPakBRakBXeEBVZkFDeEtyQWBObEN4TmpCdEpgQXRKQmxXd0ByUV9Cck9vQ3hUc0N2TXlBbER5\nQHBDY0FoQmdBZkZfQ2pDc0FgR3lFZkh9RXBPe0piQ2lDZkxrSX5hQHlYYEpvRnRWaVB2RXlEbEVx\nRXJCaUNkQn1DeEl5UWhKcU9kU3Fdakd7THRJd1FuRX1MZEV9UHpReW9AaENvSXpEX0twRWtMbk1l\nVGZmQX1jQnpTX11wRH1GalhlZkB4XnFwQHhGZUtuR3dNZEZ5TmBEY0xkRWVRbk1fcEB2WmtoQnxB\nZUpmR3NbekRzU35Ed1FgRV9PYkV1TWhIY1RmTHtbcE5xX0BoVnVvQHZ6QHd4QnxHaVB0RW1NfERh\nTmBHd1FsS3VbfEdzUnxIb1NkRXdJfFJlZkBsTl9aeE9zYEBoRG9KckZlU3RNbWhAZFJ5bUBuZkBt\ncEFyTndfQG5jQG1zQWhEd0pyTW1fQG5Se2ZAbkhzUmhlQGtxQXJBeUNgS3lWYFd5bUB+Wnl6QHZK\nfVZqVWFvQHhLd1Z0XnVgQX5SYWpAYFBtZEB0S2VYamdAcXNBdHNAcWxCdE1rXn5Ma1t+XXliQWRL\ndVZuYUBxZ0F4YUBjZUF2YEBzZUFsWG10QGRLeVlsTm9gQHZNbWFAaFBjbkB8SWFlQGpGdWtAeENn\nXWpDa3FAcEFrZkBoQF9dRmthQFtrVG9AYV53Ql9qQHlBb15rRHNrQHFPY31Cb0Z5e0B1RH1cZUJj\nVXFBZVVlQG1UU2FPaUNfYEB5R29oQW1Dd2RAY0RhZ0BtQ29jQHtDZ2ZAdURjc0BxQ2VnQHdEX3NA\nZ0RjaUBrQWtQZ0JxW3lCbVh5QWdZdUJrYEBzR3FkQXtEdWhAb0JhbEBtSW14QXdCaV1lQWdVcUxn\ndEJ7QXNbZ1B5ZEN7QHtMbUJxWHtCX19Ac0tnZ0J7Q2dnQHtAaVd3QW1We0NxZkBvR29nQWVFfWpA\neUxnbEB9QndJe1pvZUFvS19fQG9iQHN4QWlQb2ZAdV1hd0B1ZUFneEFvcUB9fEBncUB3fUB1T2tT\naUVfRntvQWlgQm9uQW1iQntGY05nS2dSfUxrU2NJc01tR2dSZ0NhTHVBcUpvQXlIX0FzR3lAe1BQ\neVRwQV9TckFfU3ZDX1N+RGFTZEh9UWRHcUtoVWlcalZhW2p1QHFkQWhTbVlgU2dXdE95U3Z5QHdn\nQWRBeUFqXmtoQGZ3QHljQXRNaVFqaUB1c0BqdEB9YkF0YUBjaUB0VXFdcHJDb3pEfGZBcXZBZGtB\ncXtBclBvXnBNfVtsT2dzQHJEdVFgUnF9QGxRc19BbkRpT35JbWJAZEl7YEBwRG1RbEFnR3hJdWFA\nbk5zY0B2RndMZEZnSmBJaUpsSnFJckNhRGxJbUpmSmdMZndBX3NBZmxAYWhAemxAbWhAdl1lWmpC\nd0FkaUB7ZEBydkBpckBmWntYemRAd2FAdk99S2ZTX0t+bEFtaEBmeUFzbEBgRXlCam5Ab1hgbEFf\naEByb0FlakB0dkF9bUBqV2tLemhBd2VAbFFpSXpwQWlqQH51QG9bdm5AaVdyYkFfYkB8UF9JZmZE\nY3RBemlAX1RobEB9V2ZhQm9yQGxhQGFSbGJAX1dmXHVYZFpxXWBaaWNAaFN7YEBsUHlbYGFAc2pB\nYGVAfWlBaE11VH5iQGN2QGpjQG96QGh3QWd8Qn5Pd1dkZUB7fEB+aEFlakJ0eEB1eEFgTG1UZmhA\nZWpBYmxBb2RDdGBBe2lCcmhAbWZBZGJAX3hAfEZpS2BedXJAdGNBYW1CaFhtW35Cc0J2VWNQZmJA\nfVVkb0lnckR2bkBvWW5ddU5wcUBjWXhwQHtYZlV9SHRhQHFRbFJrSX5QZ0pkU3VMfE11THBQe1Bw\nW19jQGpKdUx2aUBxc0BwZUBxbEBsbEB1dEBkeUF7b0JsdUBvYEF6UXlSbFJ1TnJQY0twV2NPZmdF\nd35CfF9CY35AeGJDb3NBeElpRmxYZU9mYEBrVmRnQG9WcntBd3tAfkZtQ2ZYcU90V3FRYExhR3BL\nX0Z0a0BtVWhjQHVUanVAZVpwZUBpSGxWYUR0akBvQmx0QG1BelVjQW5UaUF2WmdCaFFfRGxmQH1J\nbF57S25+QG9dcHxAX112fEBrXX57QHlcYnxAcVxwcUZpdEJ2XWlPdExvSWxKeUloT3dRdE1zUXRI\nbU5sSG1NYEZrT2hIb1FkRWlMZGhAd19CcFh9eEBoWmt2QHxReV5qUGlXZEFhQmhiQHtqQHZkQGds\nQGxmQHVtQHp+QWlxQmB1QHV8QHRSd1JiaEFxZEFkZUBvY0BwY0JlfEFwcEJrb0JwSGNIbm9AX21A\neFttWmZdeVtybEB9aUBgW3FYeGBAc19AZGdAc2dAdGhBfWZBYnlAdXZAdm5Ab2xAYElxSHh0QG1x\nQGJFeUN2YUBnWXZ8QGthQH5Jb0V+Wm9NfmBAYVF2bEFla0B4Y0J5dUBqeEBxX0B0ckBpWnBGeUJw\nc0B5XWRkQm11QHZhQG9RdEdzQ35qQHNXaG9Ae1l6VmdMdnxBe3NAcmBAc1J+UXFNYElnRmRiQHVl\nQGhEaUV4ekBrZkF2S2NOemVAe2xAamZAY2pAZnFAfXhAeFNlVnBXcVpkYEBrZkBwVXlacEd9SXJE\nZ0ZybUBrdEBwfkFpa0J4YkJvc0JyT29Sdm9Ba3tBdF9Ae2RAbmhAX29AfkRfRmxPbVNsZ0B1akBs\nfkB9akFoaUJhe0JmdkJpbENkUW9SaEp7THBoQGNyQGx1QGV9QHpGeUdqbUBlc0B0WF9caERhRWhc\ndV5ibENnfUNkaEFtbUFkZUF1bUFqfkB5Y0FyekBvYEF0d0BtfEBodkBrfkB2ckBld0B2cEB3eEB6\nT3NQdlNzVHx8QHtkQWpgQHNhQGBOYVB0TV9SbFF9XnZGc096RWdRekVvWHJBb01yQGVOZEBfX0Bp\nQGNgQG1AZVh3RWFiQmdFc2NCcVBhe0d5SWNyRGtIa3pDX0VvdUFvQ3VqQXNCaWdBdUtraURpRn14\nQG9Ec2tAc0FtaUBIbVRnQHtUZ0BhSHNEc2RBbUhndEFjRWNba0JvTnNJbWRAe09rd0BhU3N3QG9r\nQGFrQl9fQG9qQVd3QXtBY0ljQWFPR3lbfkB5WGJDYV10RmtWbkd5UmJ9QGFlQ2B4QG9uQnZ7QGt6\nQmZdd2NBYFtzZUFgZEBlYUJmSmllQH5Ee2lAbkBpdkA/dXZAZ0JvY0FzRndjQXlCZ2ZAYUZtdkBf\nQ3doQHtEaXFGbUJhcURpRXFnQnNNZ2lDe0ttdEJtR19oQXVAYWFBd0BtaUFCZWxBZUJzcERzRGtt\nQmdLfW9CX0VvaEFXbXVBVm9uQ0JjTXNGY3RDR3dBX0plfkJhQXFXa0N1fEJdYVlXZVJlQXNyQF9C\nbXFAdUVxfEB5RG1sQHlCY1lnQmVXaUV1aEBjTHl7QXNFcXFAcEFxdEBqSW9mQnpGb2BBZERnZUB6\nQWFUfklpc0BkTmV8QGpFcWJAcEB1UklxU21NfX5CX0BxY0FRa2hAdEVlZUhxSWN0RWtJd3BBa2NA\nZXNFX0VnYEBlVmdfQ19adXJDd0V5aUBzSG17QGtLfWNBb0lvZ0FnRmNxQGVRZW9BY1Z1b0FvZEB1\nY0NvQntKaURzUWFFY1VZe0FtRGlXZ0BzRGdCa1hFa050QG9dakNjWXhGcVluUnF1QHZDX0xsW21s\nQXpCdUlsSHtaYkVpUmRKbVRkR21MbkJ3RGZoQWlxQXxfQHVhQHxgQGNjQHxed2JAel1jZkBudUBt\nfEByV3dabEFfQnxuQXlkQnhwRGN1RWB0QXdoQnJhQXlxQWBZX3NAaFt5eUF+TGdwQG5MX3NAfk1h\ndkB+T3l8QG5Yc3FBelljYkJ0aUBrZER2ZEBhZEN6bEB7e0J4Wl9lQW5YdX5AcEdhWHhMX2dAeG9A\neXlCZlNzdUB2VH1zQGhjQGNuQXRLaVVoZ0BlZkFoTn1ZbkppU3RUYWBAbmRBe3dCYnNAaXVBdmZA\ncX1AaEdlTGpzQXlpQ2poQXdsQ2hlQWl7Q3ZMZ2ZAaEVha0BDaWZAQ3lsQHNDb35BZkR1YEJuQnN3\nQGRHc2RDakVhYURpQHVoQ2NHeWZEbUJ9ZkFpS2t4Q2dId3FCc0R7ckJVbX1AYkZzfEF2THl5QnpE\nZ2ZCTmNHaEZvYUR4RHFuQXhLb2tBblJ7bEFqQmFcXWNcd0R5aUBzRnNoQGFHZWdAaURxZ0BxQHdj\nQEBhY0BXa2tCQ3lxQnxAZW1BckN5bEFgTH11QX5PY3VBYGlAc2BEZmRAZWpDZENzT3BFaVtwR3lj\nQHhAfUZgRmFeek1zYEFiRXlcakR5V2JAYUNwS2t0QHROfX5AZkZtYUBwYkB1Z0RwakBxdEVsQndS\nekF9T2BGcXhAYkBxR2REeWlAWGVKZEZ5YUJuS3F4QW5EdWZATHFOekB3ZUBVc2RBakJzd0B0SmN0\nQ2ZEd3hAYkB1S2RHb3tAbEFzSnRQZ2tBcFd9Y0JmY0Btd0N6RV9cZnFAfWlFYnJAe31FZEdtYkB+\nQm9PelljbkJiS2VhQWRBZU5yQW9RZEJtXn5Cc1JqQWtJYkNlUWpHd1liTG9oQHBEdVB4d0B5ckRs\nV3NsQXJDd0xiSXdccF51bEF4T2NvQGpLZ2JAfl1nd0FsWWdqQWJFcVF8QntJbF1neEFwT29wQH5l\nQV9zRXJSaWFCZEFtTWBAX0ZMc1RMZ29AbUFjaEBnQ2teYUJhUGVGcWBAeURvWnlBeU5zT2t3QXdE\nZV1jQnNdW31PVHdPfEB5XXBCX1JwRmtnQHJIX1x6fkB9Y0V+Umt3QGZ8QG9rRGhFY09sSmVccGhB\nd29EbFVpbUB0YUNzbEdkXF9xQGRLcVdoR29TaEVnVWxDb1ZyQWNad0NlbkF9RHtsQXlEZ3RBZkN3\naEBoR3NgQHhabX1Abm5Ae29BdlRra0B+THtwQH5Ba1xIe15nQn1rQHFKY3ZBbVVhZ0J7VGlkQm1P\nd2RCdUR7YUJXcX5FZUV5fUViRGl+QHRWaXBCfEpndUBkQndZakB1XHlAaVt1Qm1cdUNjZ0JoSHFm\nSmBAeW5BdEZ5Z0BsSmVmQGRpQGdtQXpzQHVsQXJ8QHdzQXRiQHFoQGBQZ1R+S3NVck5fYkB2SXdu\nQHZCY3VCeEFjZEJmRG95QmREY3ZCbkJpeEFSeV1lQF9IW3FId0FjT2VFc1ZvSX1cYVZ9ckBxQG9C\nYUpjWn1He1lhUV92QGlOb3hAY0Z1X0FoRXt7QHJOZ3pAcEJ9S2pKbWpAeEZ1aEBwRX1mQWxDaWNB\nekJnbUJReWtAX0F3a0BlSW18Q3dMZWJFcUh5YkJhQnddY0FvVHtEfW5AcUZ7bUB3RmFrQF9BfU55\nT29uQnVCaVlfQG9LUHNGRWtwQEFnQ1J7eEBGc0lQc1xXe2JAQmtlQGtAZ2NAa0J9cUBXZUtBeURz\nQl9iQGtAZWJARW9bakJna0BuQW1UdEBtV0lpT1VzS0VjQ3dAfVBpQmVUb01rZ0F7T2NxQWFXZW5C\nY0RpYkB7Q29SeUB1UWFAeU1cYUxkQH1NeEFxTWxIb19AYGVAc3dCeF9Aa19CZEl3WnZDcUx8R2FY\nZkh3WWJHZVR4R2dRZkdjTmhJbU5mTn1VclB7VXxJeUhmSGtGflF1TmpXaU5sR3tDYEprRHpEeUFg\nS3VEdkZ1QXZLdUJmVndFenFAd05sX0JfXmx6RHl5QH59QGlSYGJBaVRsY0NfaUBodkB5T3J1QF9Q\nfHxAZVJ4fkB5U2J7QHNRbndAcU9oWGFHdlZ7SHxVdUh2cEZ7c0JyeEB5WnhlQndwQH5zQHFYeG5A\nbVZ6Z0FnYkB8a0FpZEBkZEFjX0B8QWlAcGVAdU9wWWlKcGlGX2NCamBAeUxsY0FfXHZlQXlcdGlD\nX3pAdGFBb1puX0J7Z0Bod0FvY0B2ZkFhW3BmQG9Lel9AYUlqb0Nlb0B6WGFKYlh3THxTcU1yUmFP\ndE55TmhMdU12QWNCaExnUWxKaVJkUWFhQGJjQWlwQ2BtQGlfQn5Yc3dAcE99YkB+W298QHxadWBB\ncFpje0BuXXlhQXJFZUp6VXtyQGJ7QHV3QmRdZXpAdk9fYEB4QmFGfElzV2xId09wSW1SelRtaEB+\nc0B1fkFseUBva0J+YEJ3dkRqekB1bUJwXXVlQXBJZV5uSV9hQG5Nc2RBdEx3bEJ6ZEB9bkh4akBr\naUpmQGNKZkJnXHRSc3NDcGdAfWxJZkFtUGZHY35Aek1ncUJqRH1XdERpVWxDZU9uQWNIfkZfV3pJ\nbVx+THFdbFlfbEB6VWFgQHJWZVx0dEBzdkB0ekBhX0F+XGVfQGpfQ2NlQ2RSfVJ6ZkJja0J6RmdH\nZkNtQ3JvQHVyQHJwQHtyQGRtQGtvQHh4QH17QHhGY0dgVXlVfmJAd2RAaGdAZWVAdF15WGZIeUZu\ndkBjbUBodEBra0B4YEJnbkFia0B3YkB4ekFtaUF2UXtOcGpCd3lBYGNCX3FBZmlEb2pDbGZCaXVB\neHFAfWdAbmpAZ2JAYmVAY11gbUF3YUF8ZUBfXWJnQHNeZGtBX3ZAbE1xR3hgQWttQG5iRGFyQnh5\nQHdnQHxlQWNwQHB9Q31uQmxVeU52Z0BpW3JjQHVYaGhBeXJAcHBBc3RAeHdBe3NAbGVDYW5BemBB\ne2VAZG5AbVpwUGVJclV7S3hYcU52bkBtV2p0QHlXYGNAY1J8Y0BjVWZjQW9vQGhoQGViQGJkQHFh\nQHJzQG1oQHpkQGtbbkhhRnp0QHFnQGxsQ3dgQmRHb0Vye0J9YEJ2Z0FvckB6Z0FnbEBoWV9PeFl3\nTmZYdU90WV9TZG9BZ2VBfnpCeXNCdnJCYWlCaFhlVnRkQG9hQGJJYUhsaER7dkN8bUBxZUBqZUJx\naEF8WXNQbmRDaXZBZH1BZX1AamNBX3BAbGhEZ2hDbm9DfXxBYGRCZ3xAZGVBX2JAcHxAdVhoeENr\nd0B8fkFfXnZqQW9VZHZBcVZ6cEBjTHx3QGlQYFplSn5yQGdaeGFCYXRAen5CbWVBdmxBYWlAYG1A\ncVFyd0B5UG51RH1vQH5tQXFPcmhDX1N+U3FCdGpAd0h6ZkFrVnBtQntjQGxpQ19tQG5rQHtNeGRB\nX1t6a0BnU2BhQGdNfFtzTHBUcUtqU3FNdld9U3RQeVJye0FfeUJgXWtnQHJgQHdeZGBAc1Z4cEB7\nWGptQWNnQHJrQnV2QHpkRHt0QXp2QF9YbF9AdUp6YkB7S2pkQGdKfk1vQ2BgQG9KYGJAc050Z0Bn\nVGJyQF9dfnRAd1t4W2FPalhxSXZbdUZmT3VBYm9AfUZmbEJ5TXJtQntOemxBa0pqYUJrTXRnQH1E\nYlRhQmJ6QnVGaHdBb0RmdUBhSGx0Qm9mQG5ZfUdwYUBjTmRmQmNsQHZLcURsT2dGdGdAY1J8ZUF3\nW2hoQHFNdnhBc158b0BnUHhqQmloQGJKZ0N8dEBxUXJhQHlKZmBAa0ZuQk1iaUBvRHpkQHlAemdB\nQmZ9QWVBekBBbFpTan1DbEFsTER+cUBjQmRPP2hER3xdfUJ6U3VBemFAb0Nic0FnUGxmQGtHdHNA\nZUpsZ0FrTnpsQHFCfm5BcEBwbUN2QX5QSnJcUnxsQF9AdnBAfUVya0B1SGh7QHtNaHxAeU9oY0Jx\nYkB4aUB1TnZRY0RiW2tFdGlBaUR6ZEBpRHpqQGNIfnhEeV5iXntEdF9BZ0tkaUJ1SX56SWl8QGRX\nZ0N4cUBvRXZAR3RyQXVJemZAY0RyRFdufERvY0BkTXNAcnFBbUhwR3tAeHJBYVFmTG1DdHxAbVtq\nZ0FrX0BweEB9WWBgQHVKbkNtQGBOdUNuWnFDfFNHfmNAcEBqV2BEZkh6QHhGckBibkBkTmpFfkBw\na0F4VmxcckN4W3BCaltLZnlAa0RkR1l+Y0J9SGZHWWZhQmlDeGlDY0VmekJtRHJBQ3hoQnNDeGNA\nX0FmT1tgZEJhQ3RMUXxvQWVBcGRAX0BodEBtQHxvQGlAdntFbUhwbkBnQmRvQHlIcmtBYVxkZkR1\nZUFqdkV1aUF4e0B3WGJ9QF9mQGR0QXFwQG5gQGNKemZAe0N6aEBPcnNAaUBsY0JyQXJ1Q3xIYmxB\nbEl0Z0BgRXRkQGBBYlA/eFBnQGhlQGNFYmBEdWJAcndDdV5wcUFjVGRjQ3F0QHRtQ2N5QGhzRGdw\nQWpHc0JiakVndUFiakJldEBkdkF7cEBmfURneUJ2bkBpXHZ+Q3FgQm5lRG97QWJ0RmNlQ3RxQ2lw\nQX5jR2NnQ3ZyQ2VxQWBmRHd1QXBgRHl7QXx2QnFjQWRkQ3dtQXxiRWlxQm56QXd3QHB2QmtkQWRs\nQWttQG51QG1fQGxhQHVTfnRAbV1sTV9Ibl9BX2dAamRAa1VsW2lQdGZAaVZ2VnVLflZrSXxOa0Nk\nTGlAZm9Ae0Z4ZEB1RGpZe0NiVWdFfF1tSHp1QHdUdkJtQHpzQGlSZGVBbVl0X0B3SHpSbUNsWGNA\nemBAP2JtQXhCbmlAdkF6WkR2ZEBvQnBjQGVEcF9Ac0V+TnlDfnREY29AcnZBa1ZyX0draUF+fkB7\nUnBrQXdRanlAfUlscUBxRnBNbUBuWXNBZm1AX0J6Y0FhQmJ4Q2lGdlBbdn5BdUN6UnNEZEtvQWxa\nWWhiQHtBfEVHclFVZG9AZ0FiUGxCcEhsQHhxQGFBZmlBdUJiSEFkfkFtQ3BrRXJGcHJDbEVmfUNg\nR3p1QGxAdGFAa0JqXGdFeGBAaUhoZkB1TnRlQGlUcldjT35db1d8VWtWdGNAb2hAaHdAaWJBfGhB\naXZBcmNBX3BBaH1BX29CbHZCd2hDcnpBb2VCaGZBZ3lBfHhAfWVBamlBZXdBenFAfXlAcntAZWlB\ndGpBe2FCem9BdXNCcF5lcUB4dEN5eEVoe0FxZ0N8bUJ1YUR0eUR5cEdgR3lLdm9BbXRCcGdAYXhA\nZGZAe3FAellpXnZpQX1tQXBxQWVxQWhrQ2NvQ2Rdd15+bUJrcEJqU3NRZFp5V3xsQmVuQn55RXN4\nRWpxQWtuQWZ2SV95SXZnQGdrQGJjQHFtQHB8QHt5QX5sQGdiQW5mQXFnQnJxQGtqQXphQGd9QG5x\nQG1rQm5oQWt6Q3pmQHNlQX5TZV9AdmFAX29AZHJCbXhDfGJAcW5AfmBAe21AZk5tVWxNYVZqU2tk\nQG5hQGFrQWZPc19AalBvXnJPbVxoT31YcmxAZ2VBdGxAY2NBfmxFbXpIaGdAZWRBfGlAYXJBdndB\nb3FEZmRBfWdDcEx3WXhqQX12Q2BRe21AZElvYkBoS3t1QH5Ec21AWHdrQFtpakB5QnV4QG9EZV9D\ncUp9e0V3RXl9QmtFa29Da0JtYUFrQm90QGdDcXNAeUVpcUBzRm9uQF9Ie21AaVZjcEJfVXllQm1I\neX1Aa0Jtb0BAdWRBYEF7bkBiQWtwQGpCeW5BdEZjeENuSXNhRmpBfX5AfkF3d0BgQm1vQWJDd1x+\nRHVdeEZ3WWBOYWhAaEhhUXxLc1RkT2VZbkhrS3ZIa0l+WW9ZbFdnVWxoQWNgQWxEfUNydUBhbEBg\nTHlIfkxrR2ZhQGlRbnhBX2xAemNEY3VBfnFCaXpAeHVBe29AcnpBX31AemBCe2BBYl9CZWJBenBA\ndV1kbkBpWH55THlxRWJvTnt2RmBzQnt4QHhsS29lRWZ7SHt7Q3R+QW9mQHx5QHFSbH1AY09uX0Jp\nU2R7QntSandAY0pwYkBzR35hQF9KdHFHZXhBeHNFb2hBcndFcXxAcHlFb2NBYnJCZ2RAZnJCY2hA\nZmhGfXJBcH1NX2pEZHJAcU5ockBnSnJwQWFKdHVBdURsYkl3VHhxQWlEdHVBfUN8ZEBxQmRtQHNB\ndGhAYUJ2YkBtRGZcZ0VqaEB1S25qQWdaZnlCd2tAaH1AaVZ4eUB9UmBlQG9NZGZAYUxuVF9EelNj\nQXJqQ21EbmJCeURmbEB3RH5YZUN8VHVDcFN1Q3pIa0FiakF5UHBTb0NsaUNhX0BkS3FBdmxCfVdq\nX0B7R2xaYUdocUB5UWxZdUpyYUFlXXhfQXFYfmRAb01mdUBvUXZOX0R6SGlCbFdjR3Raa0h2WWlI\nZGBBcVR2cUBnUGZNe0N4TmVEcE5rQ2JOX0NkUHtCdmBBYUx8WmdEeFVpQ2p1QGtKbmdCZVl+YEVh\ncUBiTn1CZGRAdUtgZEBjUGZiQV9oQHJVb01iU3tLfE9lSXZHc0RqT2tJflFvSGBZbUp6SG1CfElf\nQnBUY0R4SWdBbEphQXh7QnFWcGFAc0dmRHVAYGtAe0xucUFfWnRLa0NuYkBjS3hrQHVNcmdBe1Zu\nZ0BrT2BtQHVTfnRDYWZBfl9Bb2NAdmBBe2VAaF19UGZaY054Q3VBfmJAd1J6THtFek9hR2pkQGlR\nZmhCa3BAekVnQnhGdUJme0Nra0FkSXtDbklpRHpfQGtPdnhAeVtycEJ7eUB6SHtDZlNtSW5YaUt0\ndUBlWHRcZUtwT3tFfE1xRGRfQGFLfF5lSmJQX0Z0WWlLbk1rRm5MYUdqWGlPall3T2JaZU9+TnlH\naE5fR3xBa0B8Q2NBYE1fRmBTZUh4TGNFflptS3Z0QHFWaHZAdVhwQ3FBZl9AZVFsYUBpVXx+QHNq\nQHhReUtwZ0BxWm5hQHlXcmRAfVx+fUJpYkJ2eEFpZkFoRGdDYF9Ca2pBbnlAdXFAdl1pW3xPc05u\na0BhaEBia0BvZ0BsdEFhb0FkUX1QemBAc1t+YEBrWm5hQGNaaFVzUXpFe0R4RHdDZmdAeV54S2VJ\nbnJAYWhAbGJCb2tBaHZBa2NBZk9pS35TZU9wVXtPZEx9R2hFX0NwRl9EZFZnTmJzQGtbYnBAb1hk\nfEF9cEByZEBzU2ZmQH1TZm5Bb2RAekpxRHRZcUtqZ0BtUHhvQXNcakx7Q2JkQHtMemtAZ094SmtD\nYE17Q2ZVaUdsU21GeFZ9R35+QG1VelllR35EeUB6QmNAYEtzQWJvQH1IfFJrRGxUbUVofkBxVGBO\nbUNmcEBvTX54QHdPbltvSH5bc0hwbkV9aEFwaEFtVXJQa0RsS31DbkRjQXReYU14XmdQeHVBZXVA\nZkpfRmhfQF9Tak1xR3ZVcUxmZEB5WHZXcVBwWWlRaGpAd1luRWFDYGdCZXpAclVnTWZkQXFqQHpI\ncUV+dUFpeEB0Y0BpVWRfQGdRbmdAaVZ6U2dLcl17T3RMdUZ4YkJ9d0BqTWVHaGhAc1ZqbENtb0Fm\nfkJvZ0FiSmlFeGVAd1RiXHNPdHhAb19AcnlAeVx0eUBhXGBlRW9hQmZiRWFgQmhrQXtkQGBqQGdV\neG5AY1ZoZkJ9a0BwYkFzWX5qQmFoQHBbeUluS2FFcGpAYVRoSm1EclVtSnhwQGVYblZxSnpxQGFY\ndFJjSWBTeUtkU19NeFJrS2hDd0F0YEBnVG5Od0d4T29HYk15RWBTd0d4XX1LcFBfRnZPc0R2YkBh\nS3RgQHFMdn1Aa1l2Y0BlUGZlQHlOcGFAYU5uYUBrTH5jQHNMbFVlSGRlQHdNdk57RGp7QG9VanZD\nb3VAdHtBc19AaHNAY1JodEB9VHpjQH1PcmFAc1BiWHlLYGhAe1N4YEF7YEB4YEB3UHphQGtReHhA\ncWJAfmtBe3BAdkR3QmZpQHdaYFhtT2RZZ09ibUB9XGZDeUFkYUh1e0RgcEB1X0B0XG1PcE11RnJO\nfUZwVWtLflRxSnZZfUtgWHFLZGxAc1VwZ0BtVHpMfUV2dkF1akBmZUJxdkBmfEBpYEBuZkBtVWBp\nQG9WcHFBZ25AfHNAX11ieUB7X0B0W2FPYlx9Tmp4QG1fQH5ad09sSmNGbGRAaVZoZEB9VGJlQHNT\nYndAdVxgd0BrXH5dYU5kX0BxTnx7QGtcdlpxTXxbY1FueEBxZUB2Xn1Uel9Ab1RwTWtIfE5nSXpT\neUt4fkBnZEBkeUJpY0FsYEBhUWxMZUZ+WF9NeFlzSXBhQHdMWEliaEB5TmpYa0hsYEBhTXpiQHdM\ncmZAfU5oWWFJYFprSm5bc018X0BxUWJkQF9WZFxzVWhdX1t2T19OZFVtU2RPd09wVmtWbFdpV3RU\naVRmT3dMYk9nS3ZCc0FsUHFLZlpzUHZWa01mW19PelphTnBMe0Z2XH1OelRpSm5PZUlsV29LeFZr\nTHZNc0d8XnFPfFhxTX5cb09+S2dGeFNfSmBZeU1sY0B9UXJTZ0p8XmFTcmdAYVpoXHFUfGdAc1xq\nYUBlWGxXcVBgW2lSall1T2ZdZVJyXntSZlJjTGJJX0ZoXGVTcl9AeVV+T31KcGZAd1lsZEBfWW5i\nQHlXdF9Aa1V6ZUBzWnxnQGdbcFR5T25kQGNYdl1fUnBgQHtQbGVAfVNmZUBpVHBac1F0WXdQdFJz\nS2hrQGFQel9AbUpoZ0BjTXxTdUdia0BzUWxnQH1PdEl9Q2R1QGFWdnZAZ1hqWX1JemZAb090XHtL\ncFp7SmRcYU12W2lMfFNhSHZXb0liV2VJeGVAe094RX1BcmJAeVF0d0BzXHhjQGtPdFphS3p0QG1W\nbFV3SH5mQGVRfG9AdVRob0B7UWBgQGNMYlZ7SXphQHNNcHNAb1JqaUBtTmZ0QGVVYG9Ac1BmdEBx\nT3RmQGNKdmxAcUt2c0BnTX5yQH1OZHBAcU14a0FfVnJfQWNUcmtBaVV4fUB9UHZiQHVHenRAbU1y\nZUFjU25sQHtJem5Bc1ZydEFtU2JuQWNSbntAd05mcEBzT35lQGFPdHBAc1R6bEBvVHp4QG9caG9A\ndVx2WXFRbGdAaVlockBvYUB6ZkBlVnpkQGlZbl9Ab1lsW2lWaGdAY1lkXnVQfmRAcVNiaEBjVHZx\nQHFWdmxAYVJqc0B7VXJ8QHtWbndAa1V0ckBpUHp+QGNWbmZAd05qYUBnT25kQGlQZmVAZ1J+aUBl\nU2RlQGNRfHpAaVxiekBzWXxyQGVZenFAbVh6ZUB7UXRdbU5qY0B1UHJ7QH1cZmxAe1RyfUBpWX5z\nQGFXbmlAbVJgYkBhTmZvQGVUfnpEd2tBcHNDcXtAYn5Cc3lAan1CZXVAYEx9Q2B6QGtVbnlDZ2JB\naGxCe3NAbFN5SHRxRW9mQmhuQ2doQW5iQWFfQGJrQXFfQGpxQXtfQGx1QGFYYEx1RnRTY0tqUXdJ\nYnZAe2RAanpAc2RAbmVAeVNuW21OaH1AdVd8UGFGfGxAZ0x8Y0J9UnZjQGtGbmNDeVd4eUFlUHhf\nQWdLbnlBZVV4SHlBbnJAeU12V2dLblJ1SG5NZUZuU29JbkNlQWpBY0BiVmFKaFp1S2RWZUlsV2FJ\nelllSWxZeUdmV21GdlNjRnpRd0ViRntBYEhhQ3ZYaUtmW31MdFRxSmJWb0t0THtFbE1lRnBPfUR+\nV2tHbFZ7RXBUcUVoWX1Fbkx1QnZBV2RNe0JuUmVEbFp3RnJuQWVWamxAY0xqXH1JYmJAY1BiW3NM\nYmBAZU9mZ0B9T2BpQF9SYmtAY1J4YkBvTmJlQGNQYmZCY3JAdnJAa1hyaUB7U2xhQXtgQGhdd05q\neUBfX0BmVGNNdk97Rmpda016aEBvUX5qQGNSfENlQWJhQG9McnhAZVdsbEFpXnJnQG1OcnhAfVJk\nZEB3T2JacUpmYEB9TmZbfUx4akBzV2ZSa0liTHFFZEZzQXhCa0Bmd0BjVGxuQHdMemVAbUpwX0Bh\nSXxZdUh4ZEBhTHpPYURiWHtGdFRfRGZWdUNqWntDbFxxRW5LdUJmSmFCYE9jRHBcZUlsUmVGZlVt\nSGpTbUhiVHNHfFV7SGBca0lkX0B1S35eYUt0SXtDYFNrR3Rde0pkWGdHeFB3RXhLeUNgVX1Icl1n\nTWZWb0tsVHdJZkxvRXRFYUJqVnlIflBvRXpYY0hgX0BnTGBUX0h6VmNIZktvRGhNYUV+UHFGblB1\nRnhLdURgR3VCfklnRWhNZUZ6SG9Ebkp3RGhKe0V8SntGdEl7RWZIe0VySGtGdkh1RWBJcUV0RHVC\nZkFvQGRIa0V2RmdEdEV1Q25IcUV+RnVEaElzRnRHY0VoRWVDYEZ7QnpCX0J6SW1Gckd9RGpCYUFo\nQ3dBbEZrQ35Ie0VwR2tEZEBfQH5Ac0B8SGNFbEVlQ2hHb0RoQm1AfkhvRWBNbUdgRn1DdkRrQ3BF\ncUNgQXlAdEJnQWhEa0N0R2FHZklrSGRHcUZmRmtGdEVnRnxFbUd+RXtFbkNtQ3RGZUd8RGlFfkFl\nQnRHY0dgRW1FcERpRWBDcUJuRXlFZEhpSGpHa0h+R2NIakp7SWhVZ1ZwXF9dZElpSH5NZ0x8TnNK\nflFlTHpMYUhuU21LZFh3TWRaY052UXtHalVrSXxTb0l0THdFYl1nUXRHaURqZEB1WHhIZUZ4VmdP\nallfU2ZmQHFbbl9AZVhqW19UdFR3TWhWc01mT3VIdEllRGBGe0J6Y0B7TnRhQHdNdE15Q2xMZ0N+\nU31DdlxpRWZcfUVsTmlCZEVhQGJFdUBwTmlCflBvQ3BNX0JqR3VAckhpQWBHb0ByTHtBaEh1QWhF\nZUBwTW9CYk1lQnBPdUJ+R2lBZk13Qn5JY0JuTndDbkxnQmZNd0J4SXtBfkhfQnRLb0J0Q2VAdEdn\nQWZKYUJ6THFDaFRpRHBNbUJ8TGtCeEtpQmpIY0FyTV9CZktnQnJJcUFyTmlCbEtrQmROX0J6TGVC\ncE9rQmBQeUNmTWNCak59QnRJb0F4SWtCYkt7QXhQb0R+S29CZk11Qm5Ka0JsYkFzUXpsQHFLdFph\nRnhZZUZ+YEBhSG5qQGFKdFp5Rn5gQH1GfnBAe0dqSWNBbUZfekBuVXlAb0F7ZUBzQ2dpQGlVXklj\nQndAd0V9R2tiQGtHX0RfUGNWa0xtZkFzTGlyQGFAc0pyUGFBcE1UZEVqSHxHe0RqSFtyS2dAfF1J\nalw/cEd6QHRGYkFuR3RAZEV6QHRLbkFdfEV0QnJvQHZIbGhBZkJ8UnZJeHlAZEt6eEB6QnxRbkJg\nWnRqQGFKeE93RGZOY0Zsb0B3WH5bZU1sYEB9TXxqQHNRemZAfU98d0BxVmxqQHdRZEllRHxOeUdw\nT2tLblx7U3BoQG1cclthVWRda1d8dkBtaEBsakBfXWxzQHlhQHZ5QGdpQHxUc1ZiVXNZYlhlYkBg\nYkBfcEBoYEBtbkBmXmlhQGZZY1VqXGtUaEdfRXhmQHddald3VmReZWZAaF9AX2hAdFh1XWBPdVR2\nTmlSdmhAZWRAYlVnU3JOZ01kSWlIZk9lTGJYZ1J4SHFFamhAfV56TmdLdGdAa2NAbk11TWRUe1Zm\nUmlcZkxhTGpEZ0V2Q2VCeHFAZWJAcld3UmZgQF9WYFRlTnpNY0pkSn1HZGRAe1tsVHlPeFFlTmJB\nd0BmV3NTbEN5QW5DYUFkSHlCfnJBcV1Kd0BacUBkQGlAcEBZckBJaEBCZEBKYkBUXFpkRT94X0BP\ncHZAbEJsY0B6QGhVXGZUa0BmXWtEcFljRnREdUJIYUBSX0BWW1xTbkN9RHhHYU94Q2dIZkVhTWZJ\nd1d8RmNUYER9UmhBb0pDdUVIX2VASHtYekBxS3pBZ05gRGdKbERtSHZMYVB2SGNKaklfS3ZKcU1+\nQG5IZ0lwSmpDek1wRGJSeEFiUGZCaEliQnxWYkBsUWZFaG5C\n"},{"id":"432","tripId":"1558031413682","refStartpointId":"3157","refEndpointId":"3158","tripName":"Tapper","tripDescription":null,"beginTime":"2019-05-17 02:30:00","endTime":"2019-05-19 02:30:00","creationDate":"2019-05-16 07:31:31","updationDate":"2019-05-16 07:31:31","startPoint":{"id":"3157","refTripId":"432","lat":23.810331344604,"long":90.412521362305,"type":1,"address":"Dhaka, Bangladesh","fullAddress":null},"endPoint":{"id":"3158","refTripId":"432","lat":22.356851577759,"long":91.783180236816,"type":1,"address":"Chittagong, Bangladesh","fullAddress":null},"wayPoints":[{"id":"3154","refTripId":"432","lat":23.810352325439,"long":90.411346435547,"type":1,"address":"517/6 Lane - 10, Dhaka, Bangladesh","fullAddress":"517/6 Lane - 10, Dhaka, Bangladesh,Dhaka,Bangladesh"},{"id":"3155","refTripId":"432","lat":23.811159133911,"long":90.410766601562,"type":1,"address":"DOHS Bypass, Dhaka, Bangladesh","fullAddress":"DOHS Bypass, Dhaka, Bangladesh,Dhaka,Bangladesh"},{"id":"3156","refTripId":"432","lat":23.809539794922,"long":90.405296325684,"type":1,"address":"Unnamed Road, Dhaka, Bangladesh","fullAddress":"Unnamed Road, Dhaka, Bangladesh,Dhaka,Bangladesh"}],"points":[],"markers":[{"id":"2394","userId":"6","refTripId":"432","markType":1,"lat":23.80968339,"long":90.41276127,"radius":0,"address":"541/3 Rd No 12, Dhaka 1212, Bangladesh","fullAddress":"541/3 Rd No 12, Dhaka 1212, Bangladesh,Dhaka,Bangladesh","description":"Description","tripSpecific":1,"landmarkImage":[],"locations":[]},{"id":"2395","userId":"6","refTripId":"432","markType":3,"lat":23.81115708,"long":90.41268796,"radius":5600,"address":"495 Lane - 9, Dhaka, Bangladesh","fullAddress":"495 Lane - 9, Dhaka, Bangladesh,Dhaka,Bangladesh","description":"","tripSpecific":1,"landmarkImage":[],"locations":[]},{"id":"2396","userId":"6","refTripId":"432","markType":4,"lat":23.81165063,"long":90.41206766,"radius":0,"address":"449/3 Lane - 8, Dhaka, Bangladesh","fullAddress":"449/3 Lane - 8, Dhaka, Bangladesh,Dhaka,Bangladesh","description":"demo","tripSpecific":1,"landmarkImage":[],"locations":[{"lat":23.81165063,"long":90.41206766},{"lat":23.81139338,"long":90.41412589},{"lat":23.80819485,"long":90.41309781}]},{"id":"2397","userId":"6","refTripId":"432","markType":1,"lat":23.8147834,"long":90.40721174,"radius":0,"address":"DOHS Bypass, Dhaka, Bangladesh","fullAddress":"DOHS Bypass, Dhaka, Bangladesh,Dhaka,Bangladesh","description":"Description","tripSpecific":1,"landmarkImage":[],"locations":[]},{"id":"2398","userId":"6","refTripId":"432","markType":2,"lat":23.81159841,"long":90.40786344,"radius":0,"address":"Unnamed Road, Dhaka, Bangladesh","fullAddress":"Unnamed Road, Dhaka, Bangladesh,Dhaka,Bangladesh","description":"Description","tripSpecific":1,"landmarkImage":[],"locations":[]},{"id":"2400","userId":"6","refTripId":"432","markType":4,"lat":23.81143392,"long":90.41230518,"radius":0,"address":"492/2 Lane - 9, Dhaka, Bangladesh","fullAddress":"492/2 Lane - 9, Dhaka, Bangladesh,Dhaka,Bangladesh","description":"demo","tripSpecific":1,"landmarkImage":[],"locations":[{"lat":23.81143392,"long":90.41230518},{"lat":23.80890906,"long":90.41190012},{"lat":23.81039059,"long":90.41408826}]}],"reports":[],"friendShared":"1","friendAttend":"1","tripJson":"b3NnbGxAbX1pbWtEb0BtYUBqXXNBYl1pQmxEb0B2SXNDQ3RUYUJ4T2VEYEt7RWBHa0psSmVQfEtj\nU2RMe0xiRGtHP21LfEB5THxBe1RsR3dBZEF7R2pOY0NmR2NDYkd3Q3xDb1d4WHdBdEBpQlJ3VGZD\neVRsQ3lcdEZ3QkRhQUpvQHRAcUBuQV9DbERxVHZRcVF2TH1JdEZkSXJYbEZyUG5CcEZmQmZFbkN0\nRX5EYEZsUGhWdkVgSWJGfkhyRHZIcER4SGhdanhAYklmT3RHYEtqSXRMeltwYkBgakB2b0BVaEh0\nakBuTGxgQHhGeHpBek9ka0F8SnhEa2RAfEphY0F+QGFMd0VpQGV4QWtSd0dyX0BLbkBzRHplQGpm\nQHZHanhAYFN5RGpkQH5LZklwa0F+SGB6QGJJdmxCelJ+cEBmR2xvQnBNZGxBcE5uS2RBfHlCYFNi\nSHZAdHFDeFdsRGBAbGBAfERkT3pBam9CelJkQUpiTW5BeENYaEduQHRvQHhGfEVgQGB3Q2xXYGhG\naGZAYFFPaHtAdEhsfUBsSWR8QGxJYkVkQHB6QHRJdld4QmJCTH5QekFyYUFuSWREWHxEUGBISnZE\nXHZ2QHdGaGJAZUZiWXtFZlh5RnxZeUtsVnVKbE15RmBQbUlkTl9KcllzU3RHa0VwTH1IZmxAcWJA\nekp7RmRGX0N8TmtEdmdAcUdyRGlAckVfQHRLP2ZGQnZJUHpVfkJyU2ZCfHVAbkh+UGxBfnBBfkx+\nbEBiR3BhQHREenNBakxieUB2SmhBZUJiQmdBcEJhQHZCRG5AUn5AWHpBckFiQXZCSnxAamRBYkl0\ndkB6R3RZZkN6bkFyTHBwQWhLeHFBdkt6RFRgQHVBdEBlQWZBcUByQVdyQUJwQV5iQXZAUFROWGxn\nQHtRbGhAdVJ6T2VHZEp5Q2JLc0VoVmdMelVnTHpKdUV0TW9IeEd1RGxDeUFqTHFHZEtfRn5qQXNt\nQGJSY0p6WmdPZnVAcV9AZm1AaVpyVGtMckl7RWxJeUY/Tz9PUHNBYkBpQXZAeUBtRHFQeURfUWVE\naU15Q31MZ0NjTHFBYUhhQXlHe0B1TE1nSURjTVd9Tk5tTFpvTGZAcUpuQGdKaEBfR2xBd0hoQWdH\nbkJxSX5DaUxmRWdNekFfRW5CeUViRGVIaEVnSHJFc0hmWGVfQG5IeUx0Q31EcEN3RGpEe0R+RHdF\nbkV3RWREX0VyQH1AfEdvSX5MfU1kWW1bdEZjSWJJe01qVV9lQHJGc0pqRHtHekJpRG5Ka010QF9B\nbFFjWGxpQHd8QHpGc0luR3dJdkR3RWRTX1ZwTF9ScE9hV2ZQZVduRmlJdkdvS3ZJbU5mQ2tFcEhh\nTHJLY1BwU21YZltzYUB4XG1rQHxXc19AZFphYEBqRHlFdEJhQ3ZFeEJ6YERqeEFwQWhAYEV4QmR4\nQGxgQH5iQXJnQGpFekR2RmhHZFZyVmpTclFiSWRIZlF2THxTfEp6XnZOeFZqR2pPdENyT2pAeltg\nQWZXZkByV0F4XExyREJsV0ZyV0FkbkA/fmtATnZIRXhmQGlAdldIZGxAWmRFQmpIZEJkRGRCZEZg\nQ2BAWmRJdkhkTXxFekdgQnRGZkBgTVJwYEJqRmBFc0BqRXlPckZfU35EZ014SGNUYkppVWpEd0x4\nQXlJcEFjT3ZAZUh+RHluQHBDZ1t6S2tjQm5CeUpmQWVIfEF3RnxAd0JqQGtAcEBpQGpAWXJAW25A\nT2pAUWpAV3hAVWZBQ3hLckFgTmxDeE5qQnRKYEF0SkJsV3dAclFfQnJPb0N4VHNDdk15QWxEeUBw\nQ2NBaEJnQWZGX0NqQ3NBYEd5RWZIfUVwT3tKYkNpQ2ZMa0l+YUB5WGBKb0Z0VmlQdkV5RGxFcUVy\nQmlDZEJ9Q3hJeVFoSnFPZFNxXWpHe0x0SXdRbkV9TGRFfVB6UXlvQGhDb0l6RF9LcEVrTG5NZVRm\nZkF9Y0J6U19dcER9RmpYZWZAeF5xcEB4RmVLbkd3TWRGeU5gRGNMZEVlUW5NX3BAdlpraEJ8QWVK\nZkdzW3pEc1N+RHdRYEVfT2JFdU1oSGNUZkx7W3BOcV9AaFZ1b0B2ekB3eEJ8R2lQdEVtTXxEYU5g\nR3dRbEt1W3xHc1J8SG9TZEV3SXxSZWZAbE5fWnhPc2BAaERvSnJGZVN0TW1oQGRSeW1AbmZAbXBB\nck53X0BuY0Btc0FoRHdKck1tX0BuUntmQG5Ic1JoZUBrcUFyQXlDYEt5VmBXeW1Aflp5ekB2Sn1W\nalVhb0B4S3dWdF51YEF+UmFqQGBQbWRAdEtlWGpnQHFzQXRzQHFsQnRNa15+TGtbfl15YkFkS3VW\nbmFAcWdBeGFAY2VBdmBAc2VBbFhtdEBkS3lZbE5vYEB2TW1hQGhQY25AfElhZUBqRnVrQHhDZ11q\nQ2txQHBBa2ZAaEBfXUZrYUBba1RvQGFed0JfakB5QW9ea0Rza0BxT2N9Qm9GeXtAdUR9XGVCY1Vx\nQWVVZUBtVFNhT2lDX2BAeUdvaEFtQ3dkQGNEYWdAbUNvY0B7Q2dmQHVEY3NAcUNlZ0B3RF9zQGdE\nY2lAa0FrUGdCcVt5Qm1YeUFnWXVCa2BAc0dxZEF7RHVoQG9CYWxAbUlteEF3QmldZUFnVXFMZ3RC\ne0FzW2dQeWRDe0B7TG1CcVh7Ql9fQHNLZ2dCe0NnZ0B7QGlXd0FtVntDcWZAb0dvZ0FlRX1qQHlM\nZ2xAfUJ3SXtab2VBb0tfX0BvYkBzeEFpUG9mQHVdYXdAdWVBZ3hBb3FAfXxAZ3FAd31AdU9rU2lF\nX0Z7b0FpYEJvbkFtYkJ7RmNOZ0tnUn1Ma1NjSXNNbUdnUmdDYUx1QXFKb0F5SF9Bc0d5QHtQUHlU\ncEFfU3JBX1N2Q19TfkRhU2RIfVFkR3FLaFVpXGpWYVtqdUBxZEFoU21ZYFNnV3RPeVN2eUB3Z0Fk\nQXlBal5raEBmd0B5Y0F0TWlRamlAdXNAanRAfWJBdGFAY2lAdFVxXXByQ296RHxmQXF2QWRrQXF7\nQXJQb15wTX1bbE9nc0ByRHVRYFJxfUBsUXNfQW5EaU9+SW1iQGRJe2BAcERtUWxBZ0d4SXVhQG5O\nc2NAdkZ3TGRGZ0pgSWlKbEpxSXJDYURsSW1KZkpnTGZ3QV9zQWZsQGFoQHpsQG1oQHZdZVpqQndB\nZGlAe2RAcnZAaXJAZlp7WHpkQHdhQHZPfUtmU19LfmxBbWhAZnlBc2xAYEV5QmpuQG9YYGxBX2hA\ncm9BZWpAdHZBfW1AaldrS3poQXdlQGxRaUl6cEFpakB+dUBvW3ZuQGlXcmJBX2JAfFBfSWZmRGN0\nQXppQF9UaGxAfVdmYUJvckBsYUBhUmxiQF9XZlx1WGRacV1gWmljQGhTe2BAbFB5W2BhQHNqQWBl\nQH1pQWhNdVR+YkBjdkBqY0BvekBod0FnfEJ+T3dXZGVAe3xAfmhBZWpCdHhAdXhBYExtVGZoQGVq\nQWJsQW9kQ3RgQXtpQnJoQG1mQWRiQF94QHxGaUtgXnVyQHRjQWFtQmhYbVt+QnNCdlVjUGZiQH1V\nZG9JZ3JEdm5Ab1luXXVOcHFAY1l4cEB7WGZVfUh0YUBxUWxSa0l+UGdKZFN1THxNdUxwUHtQcFtf\nY0BqSnVMdmlAcXNAcGVAcWxAbGxAdXRAZHlBe29CbHVAb2BBelF5UmxSdU5yUGNLcFdjT2ZnRXd+\nQnxfQmN+QHhiQ29zQXhJaUZsWGVPZmBAa1ZkZ0BvVnJ7QXd7QH5GbUNmWHFPdFdxUWBMYUdwS19G\ndGtAbVVoY0B1VGp1QGVacGVAaUhsVmFEdGpAb0JsdEBtQXpVY0FuVGlBdlpnQmhRX0RsZkB9SWxe\ne0tufkBvXXB8QF9ddnxAa11+e0B5XGJ8QHFccHFGaXRCdl1pT3RMb0lsSnlJaE93UXRNc1F0SG1O\nbEhtTWBGa09oSG9RZEVpTGRoQHdfQnBYfXhAaFprdkB8UXlealBpV2RBYUJoYkB7akB2ZEBnbEBs\nZkB1bUB6fkFpcUJgdUB1fEB0UndSYmhBcWRBZGVAb2NAcGNCZXxBcHBCa29CcEhjSG5vQF9tQHhb\nbVpmXXlbcmxAfWlAYFtxWHhgQHNfQGRnQHNnQHRoQX1mQWJ5QHV2QHZuQG9sQGBJcUh4dEBtcUBi\nRXlDdmFAZ1l2fEBrYUB+SW9FflpvTX5gQGFRdmxBZWtAeGNCeXVAanhAcV9AdHJAaVpwRnlCcHNA\neV1kZEJtdUB2YUBvUXRHc0N+akBzV2hvQHtZelZnTHZ8QXtzQHJgQHNSflFxTWBJZ0ZkYkB1ZUBo\nRGlFeHpAa2ZBdktjTnplQHtsQGpmQGNqQGZxQH14QHhTZVZwV3FaZGBAa2ZAcFV5WnBHfUlyRGdG\ncm1Aa3RAcH5BaWtCeGJCb3NCck9vUnZvQWt7QXRfQHtkQG5oQF9vQH5EX0ZsT21TbGdAdWpAbH5A\nfWpBaGlCYXtCZnZCaWxDZFFvUmhKe0xwaEBjckBsdUBlfUB6RnlHam1AZXNAdFhfXGhEYUVoXHVe\nYmxDZ31DZGhBbW1BZGVBdW1Ban5AeWNBcnpAb2BBdHdAbXxAaHZAa35AdnJAZXdAdnBAd3hAek9z\nUHZTc1R8fEB7ZEFqYEBzYUBgTmFQdE1fUmxRfV52RnNPekVnUXpFb1hyQW9NckBlTmRAX19AaUBj\nYEBtQGVYd0VhYkJnRXNjQnFQYXtHeUljckRrSGt6Q19Fb3VBb0N1akFzQmlnQXVLa2lEaUZ9eEBv\nRHNrQHNBbWlASG1UZ0B7VGdAYUhzRHNkQW1IZ3RBY0VjW2tCb05zSW1kQHtPa3dAYVNzd0Bva0Bh\na0JfX0BvakFXd0F7QWNJY0FhT0d5W35AeVhiQ2FddEZrVm5HeVJifUBhZUNgeEBvbkJ2e0BrekJm\nXXdjQWBbc2VBYGRAZWFCZkppZUB+RHtpQG5AaXZAP3V2QGdCb2NBc0Z3Y0F5QmdmQGFGbXZAX0N3\naEB7RGlxRm1CYXFEaUVxZ0JzTWdpQ3tLbXRCbUdfaEF1QGFhQXdAbWlBQmVsQWVCc3BEc0RrbUJn\nS31vQl9Fb2hBV211QVZvbkNCY01zRmN0Q0d3QV9KZX5CYUFxV2tDdXxCXWFZV2VSZUFzckBfQm1x\nQHVFcXxAeURtbEB5QmNZZ0JlV2lFdWhAY0x5e0FzRXFxQHBBcXRAaklvZkJ6Rm9gQWREZ2VAekFh\nVH5JaXNAZE5lfEBqRXFiQHBAdVJJcVNtTX1+Ql9AcWNBUWtoQHRFZWVIcUljdEVrSXdwQWtjQGVz\nRV9FZ2BAZVZnX0NfWnVyQ3dFeWlAc0hte0BrS31jQW9Jb2dBZ0ZjcUBlUWVvQWNWdW9Bb2RAdWND\nb0J7SmlEc1FhRWNVWXtBbURpV2dAc0RnQmtYRWtOdEBvXWpDY1l4RnFZblJxdUB2Q19MbFttbEF6\nQnVJbEh7WmJFaVJkSm1UZEdtTG5Cd0RmaEFpcUF8X0B1YUB8YEBjY0B8XndiQHpdY2ZAbnVAbXxA\ncld3WmxBX0J8bkF5ZEJ4cERjdUVgdEF3aEJyYUF5cUFgWV9zQGhbeXlBfkxncEBuTF9zQH5NYXZA\nfk95fEBuWHNxQXpZY2JCdGlAa2REdmRAYWRDemxAe3tCeFpfZUFuWHV+QHBHYVh4TF9nQHhvQHl5\nQmZTc3VAdlR9c0BoY0BjbkF0S2lVaGdAZWZBaE59WW5KaVN0VGFgQG5kQXt3QmJzQGl1QXZmQHF9\nQGhHZUxqc0F5aUNqaEF3bENoZUFpe0N2TGdmQGhFYWtAQ2lmQEN5bEBzQ29+QWZEdWBCbkJzd0Bk\nR3NkQ2pFYWFEaUB1aENjR3lmRG1CfWZBaUtreENnSHdxQnNEe3JCVW19QGJGc3xBdkx5eUJ6RGdm\nQk5jR2hGb2FEeERxbkF4S29rQW5Se2xBakJhXF1jXHdEeWlAc0ZzaEBhR2VnQGlEcWdAcUB3Y0BA\nYWNAV2trQkN5cUJ8QGVtQXJDeWxBYEx9dUF+T2N1QWBpQHNgRGZkQGVqQ2RDc09wRWlbcEd5Y0B4\nQH1GYEZhXnpNc2BBYkV5XGpEeVdiQGFDcEtrdEB0Tn1+QGZGbWFAcGJAdWdEcGpAcXRFbEJ3UnpB\nfU9gRnF4QGJAcUdkRHlpQFhlSmRGeWFCbktxeEFuRHVmQExxTnpAd2VAVXNkQWpCc3dAdEpjdENm\nRHd4QGJAdUtkR297QGxBc0p0UGdrQXBXfWNCZmNAbXdDekVfXGZxQH1pRWJyQHt9RWRHbWJAfkJv\nT3pZY25CYktlYUFkQWVOckFvUWRCbV5+QnNSakFrSWJDZVFqR3dZYkxvaEBwRHVQeHdAeXJEbFdz\nbEFyQ3dMYkl3XHBedWxBeE9jb0BqS2diQH5dZ3dBbFlnakFiRXFRfEJ7SWxdZ3hBcE9vcEB+ZUFf\nc0VyUmlhQmRBbU1gQF9GTHNUTGdvQG1BY2hAZ0NrXmFCYVBlRnFgQHlEb1p5QXlOc09rd0F3RGVd\nY0JzXVt9T1R3T3xAeV1wQl9ScEZrZ0BySF9cen5AfWNFflJrd0BmfEBva0RoRWNPbEplXHBoQXdv\nRGxVaW1AdGFDc2xHZFxfcUBkS3FXaEdvU2hFZ1VsQ29WckFjWndDZW5BfUR7bEF5RGd0QWZDd2hA\naEdzYEB4Wm19QG5uQHtvQXZUa2tAfkx7cEB+QWtcSHteZ0J9a0BxSmN2QW1VYWdCe1RpZEJtT3dk\nQnVEe2FCV3F+RWVFeX1FYkRpfkB0VmlwQnxKZ3VAZEJ3WWpAdVx5QGlbdUJtXHVDY2dCaEhxZkpg\nQHluQXRGeWdAbEplZkBkaUBnbUF6c0B1bEFyfEB3c0F0YkBxaEBgUGdUfktzVXJOX2JAdkl3bkB2\nQmN1QnhBY2RCZkRveUJkRGN2Qm5CaXhBUnldZUBfSFtxSHdBY09lRXNWb0l9XGFWfXJAcUBvQmFK\nY1p9R3tZYVFfdkBpTm94QGNGdV9BaEV7e0ByTmd6QHBCfUtqSm1qQHhGdWhAcEV9ZkFsQ2ljQXpC\nZ21CUXlrQF9Bd2tAZUltfEN3TGViRXFIeWJCYUJ3XWNBb1R7RH1uQHFGe21Ad0Zha0BfQX1OeU9v\nbkJ1QmlZX0BvS1BzRkVrcEBBZ0NSe3hARnNJUHNcV3tiQEJrZUBrQGdjQGtCfXFAV2VLQXlEc0Jf\nYkBrQGViQEVvW2pCZ2tAbkFtVHRAbVdJaU9Vc0tFY0N3QH1QaUJlVG9Na2dBe09jcUFhV2VuQmNE\naWJAe0NvUnlAdVFhQHlNXGFMZEB9TXhBcU1sSG9fQGBlQHN3QnhfQGtfQmRJd1p2Q3FMfEdhWGZI\nd1liR2VUeEdnUWZHY05oSW1OZk59VXJQe1V8SXlIZkhrRn5RdU5qV2lObEd7Q2BKa0R6RHlBYEt1\nRHZGdUF2S3VCZlZ3RXpxQHdObF9CX15sekR5eUB+fUBpUmBiQWlUbGNDX2lAaHZAeU9ydUBfUHx8\nQGVSeH5AeVNie0BzUW53QHFPaFhhR3ZWe0h8VXVIdnBGe3NCcnhAeVp4ZUJ3cEB+c0BxWHhuQG1W\nemdBZ2JAfGtBaWRAZGRBY19AfEFpQHBlQHVPcFlpSnBpRl9jQmpgQHlMbGNBX1x2ZUF5XHRpQ196\nQHRhQW9abl9Ce2dAaHdBb2NAdmZBYVtwZkBvS3pfQGFJam9DZW9AelhhSmJYd0x8U3FNclJhT3RO\neU5oTHVNdkFjQmhMZ1FsSmlSZFFhYUBiY0FpcENgbUBpX0J+WHN3QHBPfWJAfltvfEB8WnVgQXBa\nY3tAbl15YUFyRWVKelV7ckBie0B1d0JkXWV6QHZPX2BAeEJhRnxJc1dsSHdPcEltUnpUbWhAfnNA\ndX5BbHlAb2tCfmBCd3ZEanpAdW1CcF11ZUFwSWVebklfYUBuTXNkQXRMd2xCemRAfW5IeGpAa2lK\nZkBjSmZCZ1x0UnNzQ3BnQH1sSWZBbVBmR2N+QHpNZ3FCakR9V3REaVVsQ2VPbkFjSH5GX1d6SW1c\nfkxxXWxZX2xAelVhYEByVmVcdHRAc3ZAdHpAYV9BflxlX0BqX0NjZUNkUn1SemZCY2tCekZnR2ZD\nbUNyb0B1ckBycEB7ckBkbUBrb0B4eEB9e0B4RmNHYFV5VX5iQHdkQGhnQGVlQHRdeVhmSHlGbnZA\nY21AaHRAa2tAeGBCZ25BYmtAd2JAeHpBbWlBdlF7TnBqQnd5QWBjQl9xQWZpRG9qQ2xmQml1QXhx\nQH1nQG5qQGdiQGJlQGNdYG1Bd2FBfGVAX11iZ0BzXmRrQV92QGxNcUd4YEFrbUBuYkRhckJ4eUB3\nZ0B8ZUFjcEBwfUN9bkJsVXlOdmdAaVtyY0B1WGhoQXlyQHBwQXN0QHh3QXtzQGxlQ2FuQXpgQXtl\nQGRuQG1acFBlSXJVe0t4WHFOdm5AbVdqdEB5V2BjQGNSfGNAY1VmY0Fvb0BoaEBlYkBiZEBxYUBy\nc0BtaEB6ZEBrW25IYUZ6dEBxZ0BsbEN3YEJkR29FcntCfWBCdmdBb3JAemdBZ2xAaFlfT3hZd05m\nWHVPdFlfU2RvQWdlQX56QnlzQnZyQmFpQmhYZVZ0ZEBvYUBiSWFIbGhEe3ZDfG1AcWVAamVCcWhB\nfFlzUG5kQ2l2QWR9QWV9QGpjQV9wQGxoRGdoQ25vQ318QWBkQmd8QGRlQV9iQHB8QHVYaHhDa3dA\nfH5BX152akFvVWR2QXFWenBAY0x8d0BpUGBaZUp+ckBnWnhhQmF0QHp+Qm1lQXZsQWFpQGBtQHFR\ncndAeVBudUR9b0B+bUFxT3JoQ19TflNxQnRqQHdIemZBa1ZwbUJ7Y0BsaUNfbUBua0B7TXhkQV9b\nemtAZ1NgYUBnTXxbc0xwVHFLalNxTXZXfVN0UHlScntBX3lCYF1rZ0ByYEB3XmRgQHNWeHBAe1hq\nbUFjZ0Bya0J1dkB6ZER7dEF6dkBfWGxfQHVKemJAe0tqZEBnSn5Nb0NgYEBvSmBiQHNOdGdAZ1Ri\nckBfXX50QHdbeFthT2pYcUl2W3VGZk91QWJvQH1GZmxCeU1ybUJ7TnpsQWtKamFCa010Z0B9RGJU\nYUJiekJ1Rmh3QW9EZnVAYUhsdEJvZkBuWX1HcGFAY05kZkJjbEB2S3FEbE9nRnRnQGNSfGVBd1to\naEBxTXZ4QXNefG9AZ1B4akJpaEBiSmdDfHRAcVFyYUB5SmZgQGtGbkJNYmlAb0R6ZEB5QHpnQUJm\nfUFlQXpAQWxaU2p9Q2xBbExEfnFAY0JkTz9oREd8XX1CelN1QXphQG9DYnNBZ1BsZkBrR3RzQGVK\nbGdBa056bEBxQn5uQXBAcG1DdkF+UEpyXFJ8bEBfQHZwQH1FcmtAdUhoe0B7TWh8QHlPaGNCcWJA\neGlAdU52UWNEYltrRXRpQWlEemRAaUR6akBjSH54RHleYl57RHRfQWdLZGlCdUl+eklpfEBkV2dD\neHFAb0V2QEd0ckF1SXpmQGNEckRXbnxEb2NAZE1zQHJxQW1IcEd7QHhyQWFRZkxtQ3R8QG1bamdB\na19AcHhAfVlgYEB1Sm5DbUBgTnVDblpxQ3xTR35jQHBAaldgRGZIekB4RnJAYm5AZE5qRX5AcGtB\neFZsXHJDeFtwQmpbS2Z5QGtEZEdZfmNCfUhmR1lmYUJpQ3hpQ2NFZnpCbURyQUN4aEJzQ3hjQF9B\nZk9bYGRCYUN0TFF8b0FlQXBkQF9AaHRAbUB8b0BpQHZ7RW1IcG5AZ0Jkb0B5SHJrQWFcZGZEdWVB\nanZFdWlBeHtAd1hifUBfZkBkdEFxcEBuYEBjSnpmQHtDemhAT3JzQGlAbGNCckFydUN8SGJsQWxJ\ndGdAYEV0ZEBgQWJQP3hQZ0BoZUBjRWJgRHViQHJ3Q3VecHFBY1RkY0NxdEB0bUNjeUBoc0RncEFq\nR3NCYmpFZ3VBYmpCZXRAZHZBe3BAZn1EZ3lCdm5AaVx2fkNxYEJuZURve0FidEZjZUN0cUNpcEF+\nY0djZ0N2ckNlcUFgZkR3dUFwYER5e0F8dkJxY0FkZEN3bUF8YkVpcUJuekF3d0BwdkJrZEFkbEFr\nbUBudUBtX0BsYUB1U350QG1dbE1fSG5fQV9nQGpkQGtVbFtpUHRmQGlWdlZ1S35Wa0l8TmtDZExp\nQGZvQHtGeGRAdURqWXtDYlVnRXxdbUh6dUB3VHZCbUB6c0BpUmRlQW1ZdF9Ad0h6Um1DbFhjQHpg\nQD9ibUF4Qm5pQHZBelpEdmRAb0JwY0BlRHBfQHNFfk55Q350RGNvQHJ2QWtWcl9Ha2lBfn5Ae1Jw\na0F3UWp5QH1JbHFAcUZwTW1AbllzQWZtQF9CemNBYUJieENpRnZQW3Z+QXVDelJzRGRLb0FsWllo\nYkB7QXxFR3JRVWRvQGdBYlBsQnBIbEB4cUBhQWZpQXVCYkhBZH5BbUNwa0VyRnByQ2xFZn1DYEd6\ndUBsQHRhQGtCalxnRXhgQGlIaGZAdU50ZUBpVHJXY09+XW9XfFVrVnRjQG9oQGh3QGliQXxoQWl2\nQXJjQV9wQWh9QV9vQmx2QndoQ3J6QW9lQmhmQWd5QXx4QH1lQWppQWV3QXpxQH15QHJ7QGVpQXRq\nQXthQnpvQXVzQnBeZXFAeHRDeXhFaHtBcWdDfG1CdWFEdHlEeXBHYEd5S3ZvQW10QnBnQGF4QGRm\nQHtxQHpZaV52aUF9bUFwcUFlcUFoa0Njb0NkXXdefm1Ca3BCalNzUWRaeVd8bEJlbkJ+eUVzeEVq\ncUFrbkFmdklfeUl2Z0Bna0BiY0BxbUBwfEB7eUF+bEBnYkFuZkFxZ0JycUBrakF6YUBnfUBucUBt\na0JuaEFrekN6ZkBzZUF+U2VfQHZhQF9vQGRyQm14Q3xiQHFuQH5gQHttQGZObVVsTWFWalNrZEBu\nYUBha0FmT3NfQGpQb15yT21caE99WHJsQGdlQXRsQGNjQX5sRW16SGhnQGVkQXxpQGFyQXZ3QW9x\nRGZkQX1nQ3BMd1l4akF9dkNgUXttQGRJb2JAaEt7dUB+RHNtQFh3a0BbaWpAeUJ1eEBvRGVfQ3FK\nfXtFd0V5fUJrRWtvQ2tCbWFBa0JvdEBnQ3FzQHlFaXFAc0ZvbkBfSHttQGlWY3BCX1V5ZUJtSHl9\nQGtCbW9AQHVkQWBBe25AYkFrcEBqQnluQXRGY3hDbklzYUZqQX1+QH5Bd3dAYEJtb0FiQ3dcfkR1\nXXhGd1lgTmFoQGhIYVF8S3NUZE9lWW5Ia0t2SGtJfllvWWxXZ1VsaEFjYEFsRH1DcnVAYWxAYEx5\nSH5Ma0dmYUBpUW54QV9sQHpjRGN1QX5xQml6QHh1QXtvQHJ6QV99QHpgQntgQWJfQmViQXpwQHVd\nZG5AaVh+eUx5cUVib057dkZgc0J7eEB4bEtvZUVme0h7e0N0fkFvZkB8eUBxUmx9QGNPbl9CaVNk\ne0J7Ump3QGNKcGJAc0d+YUBfSnRxR2V4QXhzRW9oQXJ3RXF8QHB5RW9jQWJyQmdkQGZyQmNoQGZo\nRn1yQXB9TV9qRGRyQHFOaHJAZ0pycEFhSnR1QXVEbGJJd1R4cUFpRHR1QX1DfGRAcUJkbUBzQXRo\nQGFCdmJAbURmXGdFamhAdUtuakFnWmZ5QndrQGh9QGlWeHlAfVJgZUBvTWRmQGFMblRfRHpTY0Fy\nakNtRG5iQnlEZmxAd0R+WGVDfFR1Q3BTdUN6SGtBYmpBeVBwU29DbGlDYV9AZEtxQXZsQn1Xal9A\ne0dsWmFHaHFAeVFsWXVKcmFBZV14X0FxWH5kQG9NZnVAb1F2Tl9EekhpQmxXY0d0WmtIdllpSGRg\nQXFUdnFAZ1BmTXtDeE5lRHBOa0NiTl9DZFB7QnZgQWFMfFpnRHhVaUNqdUBrSm5nQmVZfmBFYXFA\nYk59QmRkQHVLYGRAY1BmYkFfaEByVW9NYlN7S3xPZUl2R3NEak9rSX5Rb0hgWW1KekhtQnxJX0Jw\nVGNEeElnQWxKYUF4e0JxVnBhQHNHZkR1QGBrQHtMbnFBX1p0S2tDbmJAY0t4a0B1TXJnQXtWbmdA\na09gbUB1U350Q2FmQX5fQW9jQHZgQXtlQGhdfVBmWmNOeEN1QX5iQHdSekx7RXpPYUdqZEBpUWZo\nQmtwQHpFZ0J4RnVCZntDa2tBZEl7Q25JaUR6X0BrT3Z4QHlbcnBCe3lAekh7Q2ZTbUluWGlLdHVA\nZVh0XGVLcE97RXxNcURkX0BhS3xeZUpiUF9GdFlpS25Na0ZuTGFHalhpT2pZd09iWmVPfk55R2hO\nX0d8QWtAfENjQWBNX0ZgU2VIeExjRX5abUt2dEBxVmh2QHVYcENxQWZfQGVRbGFAaVV8fkBzakB4\nUXlLcGdAcVpuYUB5V3JkQH1cfn1CaWJCdnhBaWZBaERnQ2BfQmtqQW55QHVxQHZdaVt8T3NObmtA\nYWhAYmtAb2dAbHRBYW9BZFF9UHpgQHNbfmBAa1puYUBjWmhVc1F6RXtEeER3Q2ZnQHleeEtlSW5y\nQGFoQGxiQm9rQWh2QWtjQWZPaUt+U2VPcFV7T2RMfUdoRV9DcEZfRGRWZ05ic0BrW2JwQG9YZHxB\nfXBAcmRAc1NmZkB9U2ZuQW9kQHpKcUR0WXFLamdAbVB4b0FzXGpMe0NiZEB7THprQGdPeEprQ2BN\ne0NmVWlHbFNtRnhWfUd+fkBtVXpZZUd+RHlAekJjQGBLc0Fib0B9SHxSa0RsVG1FaH5AcVRgTm1D\nZnBAb01+eEB3T25bb0h+W3NIcG5FfWhBcGhBbVVyUGtEbEt9Q25EY0F0XmFNeF5nUHh1QWV1QGZK\nX0ZoX0BfU2pNcUd2VXFMZmRAeVh2V3FQcFlpUWhqQHdZbkVhQ2BnQmV6QHJVZ01mZEFxakB6SHFF\nfnVBaXhAdGNAaVVkX0BnUW5nQGlWelNnS3Jde090THVGeGJCfXdAak1lR2hoQHNWamxDbW9BZn5C\nb2dBYkppRXhlQHdUYlxzT3R4QG9fQHJ5QHlcdHlAYVxgZUVvYUJmYkVhYEJoa0F7ZEBgakBnVXhu\nQGNWaGZCfWtAcGJBc1l+akJhaEBwW3lJbkthRXBqQGFUaEptRHJVbUp4cEBlWG5WcUp6cUBhWHRS\nY0lgU3lLZFNfTXhSa0toQ3dBdGBAZ1RuTndHeE9vR2JNeUVgU3dHeF19S3BQX0Z2T3NEdmJAYUt0\nYEBxTHZ9QGtZdmNAZVBmZUB5TnBhQGFObmFAa0x+Y0BzTGxVZUhkZUB3TXZOe0Rqe0BvVWp2Q291\nQHR7QXNfQGhzQGNSaHRAfVR6Y0B9T3JhQHNQYlh5S2BoQHtTeGBBe2BAeGBAd1B6YUBrUXh4QHFi\nQH5rQXtwQHZEd0JmaUB3WmBYbU9kWWdPYm1AfVxmQ3lBZGFIdXtEYHBAdV9AdFxtT3BNdUZyTn1G\ncFVrS35UcUp2WX1LYFhxS2RsQHNVcGdAbVR6TH1FdnZBdWpAZmVCcXZAZnxAaWBAbmZAbVVgaUBv\nVnBxQWduQHxzQF9dYnlAe19AdFthT2JcfU5qeEBtX0B+WndPbEpjRmxkQGlWaGRAfVRiZUBzU2J3\nQHVcYHdAa1x+XWFOZF9AcU58e0BrXHZacU18W2NRbnhAcWVAdl59VHpfQG9UcE1rSHxOZ0l6U3lL\neH5AZ2RAZHlCaWNBbGBAYVFsTGVGflhfTXhZc0lwYUB3TFhJYmhAeU5qWGtIbGBAYU16YkB3THJm\nQH1OaFlhSWBaa0puW3NNfF9AcVFiZEBfVmRcc1VoXV9bdk9fTmRVbVNkT3dPcFZrVmxXaVd0VGlU\nZk93TGJPZ0t2QnNBbFBxS2Zac1B2VmtNZltfT3paYU5wTHtGdlx9TnpUaUpuT2VJbFdvS3hWa0x2\nTXNHfF5xT3xYcU1+XG9PfktnRnhTX0pgWXlNbGNAfVFyU2dKfF5hU3JnQGFaaFxxVHxnQHNcamFA\nZVhsV3FQYFtpUmpZdU9mXWVScl57UmZSY0xiSV9GaFxlU3JfQHlVfk99SnBmQHdZbGRAX1luYkB5\nV3RfQGtVemVAc1p8Z0BnW3BUeU9uZEBjWHZdX1JwYEB7UGxlQH1TZmVAaVRwWnNRdFl3UHRSc0to\na0BhUHpfQG1KaGdAY018U3VHYmtAc1FsZ0B9T3RJfUNkdUBhVnZ2QGdYall9SXpmQG9PdFx7S3Ba\ne0pkXGFNdltpTHxTYUh2V29JYldlSXhlQHtPeEV9QXJiQHlRdHdAc1x4Y0BrT3RaYUt6dEBtVmxV\nd0h+ZkBlUXxvQHVUaG9Ae1FgYEBjTGJWe0l6YUBzTXBzQG9SamlAbU5mdEBlVWBvQHNQZnRAcU90\nZkBjSnZsQHFLdnNAZ01+ckB9TmRwQHFNeGtBX1ZyX0FjVHJrQWlVeH1AfVB2YkB1R3p0QG1NcmVB\nY1NubEB7SXpuQXNWcnRBbVNibkFjUm57QHdOZnBAc09+ZUBhT3RwQHNUemxAb1R6eEBvXGhvQHVc\ndllxUWxnQGlZaHJAb2FAemZAZVZ6ZEBpWW5fQG9ZbFtpVmhnQGNZZF51UH5kQHFTYmhAY1R2cUBx\nVnZsQGFSanNAe1VyfEB7Vm53QGtVdHJAaVB6fkBjVm5mQHdOamFAZ09uZEBpUGZlQGdSfmlAZVNk\nZUBjUXx6QGlcYnpAc1l8ckBlWXpxQG1YemVAe1F0XW1OamNAdVBye0B9XGZsQHtUcn1AaVl+c0Bh\nV25pQG1SYGJAYU5mb0BlVH56RHdrQXBzQ3F7QGJ+QnN5QGp9QmV1QGBMfUNgekBrVW55Q2diQWhs\nQntzQGxTeUh0cUVvZkJobkNnaEFuYkFhX0Bia0FxX0BqcUF7X0BsdUBhWGBMdUZ0U2NLalF3SWJ2\nQHtkQGp6QHNkQG5lQHlTblttTmh9QHVXfFBhRnxsQGdMfGNCfVJ2Y0BrRm5jQ3lXeHlBZVB4X0Fn\nS255QWVVeEh5QW5yQHlNdldnS25SdUhuTWVGblNvSW5DZUFqQWNAYlZhSmhadUtkVmVJbFdhSXpZ\nZUlsWXlHZldtRnZTY0Z6UXdFYkZ7QWBIYUN2WGlLZlt9THRUcUpiVm9LdEx7RWxNZUZwT31Efldr\nR2xWe0VwVHFFaFl9RW5MdUJ2QVdkTXtCblJlRGxad0ZybkFlVmpsQGNMalx9SWJiQGNQYltzTGJg\nQGVPZmdAfU9gaUBfUmJrQGNSeGJAb05iZUBjUGJmQmNyQHZyQGtYcmlAe1NsYUF7YEBoXXdOanlA\nX19AZlRjTXZPe0ZqXWtNemhAb1F+akBjUnxDZUFiYUBvTHJ4QGVXbGxBaV5yZ0BtTnJ4QH1SZGRA\nd09iWnFKZmBAfU5mW31MeGpAc1dmUmtJYkxxRWRGc0F4QmtAZndAY1RsbkB3THplQG1KcF9AYUl8\nWXVIeGRAYUx6T2FEYlh7RnRUX0RmVnVDalp7Q2xccUVuS3VCZkphQmBPY0RwXGVJbFJlRmZVbUhq\nU21IYlRzR3xVe0hgXGtJZF9AdUt+XmFLdEl7Q2BTa0d0XXtKZFhnR3hQd0V4S3lDYFV9SHJdZ01m\nVm9LbFR3SWZMb0V0RWFCalZ5SH5Qb0V6WGNIYF9AZ0xgVF9IelZjSGZLb0RoTWFFflBxRm5QdUZ4\nS3VEYEd1Qn5JZ0VoTWVGekhvRG5Kd0RoSntFfEp7RnRJe0VmSHtFckhrRnZIdUVgSXFFdER1QmZB\nb0BkSGtFdkZnRHRFdUNuSHFFfkZ1RGhJc0Z0R2NFaEVlQ2BGe0J6Ql9CekltRnJHfURqQmFBaEN3\nQWxGa0N+SHtFcEdrRGRAX0B+QHNAfEhjRWxFZUNoR29EaEJtQH5Ib0VgTW1HYEZ9Q3ZEa0NwRXFD\nYEF5QHRCZ0FoRGtDdEdhR2ZJa0hkR3FGZkZrRnRFZ0Z8RW1HfkV7RW5DbUN0RmVHfERpRX5BZUJ0\nR2NHYEVtRXBEaUVgQ3FCbkV5RWRIaUhqR2tIfkdjSGpKe0loVWdWcFxfXWRJaUh+TWdMfE5zSn5R\nZUx6TGFIblNtS2RYd01kWmNOdlF7R2pVa0l8U29JdEx3RWJdZ1F0R2lEamRAdVh4SGVGeFZnT2pZ\nX1NmZkBxW25fQGVYaltfVHRUd01oVnNNZk91SHRJZURgRntCemNAe050YUB3TXRNeUNsTGdDflN9\nQ3ZcaUVmXH1FbE5pQmRFYUBiRXVAcE5pQn5Qb0NwTV9Cakd1QHJIaUFgR29Ackx7QWhIdUFoRWVA\ncE1vQmJNZUJwT3VCfkdpQWZNd0J+SWNCbk53Q25MZ0JmTXdCeEl7QX5IX0J0S29CdENlQHRHZ0Fm\nSmFCekxxQ2hUaURwTW1CfExrQnhLaUJqSGNBck1fQmZLZ0JySXFBck5pQmxLa0JkTl9CekxlQnBP\na0JgUHlDZk1jQmpOfUJ0SW9BeElrQmJLe0F4UG9EfktvQmZNdUJuSmtCbGJBc1F6bEBxS3RaYUZ4\nWWVGfmBAYUhuakBhSnRaeUZ+YEB9Rn5wQHtHakljQW1GX3pAblV5QG9Be2VAc0NnaUBpVV5JY0J3\nQHdFfUdrYkBrR19EX1BjVmtMbWZBc0xpckBhQHNKclBhQXBNVGRFakh8R3tEakhbcktnQHxdSWpc\nP3BHekB0RmJBbkd0QGRFekB0S25BXXxFdEJyb0B2SGxoQWZCfFJ2SXh5QGRLenhAekJ8UW5CYFp0\nakBhSnhPd0RmTmNGbG9Ad1h+W2VNbGBAfU18akBzUXpmQH1PfHdAcVZsakB3UWRJZUR8TnlHcE9r\nS25ce1NwaEBtXHJbYVVkXWtXfHZAbWhAbGpAX11sc0B5YUB2eUBnaUB8VHNWYlVzWWJYZWJAYGJA\nX3BAaGBAbW5AZl5pYUBmWWNValxrVGhHX0V4ZkB3XWpXd1ZkXmVmQGhfQF9oQHRYdV1gT3VUdk5p\nUnZoQGVkQGJVZ1NyTmdNZElpSGZPZUxiWGdSeEhxRWpoQH1eek5nS3RnQGtjQG5NdU1kVHtWZlJp\nXGZMYUxqRGdFdkNlQnhxQGViQHJXd1JmYEBfVmBUZU56TWNKZEp9R2RkQHtbbFR5T3hRZU5iQXdA\nZldzU2xDeUFuQ2FBZEh5Qn5yQXFdSndAWnFAZEBpQHBAWXJASWhAQmRASmJAVFxaZEU/eF9AT3B2\nQGxCbGNAekBoVVxmVGtAZl1rRHBZY0Z0RHVCSGFAUl9AVltcU25DfUR4R2FPeENnSGZFYU1mSXdX\nfEZjVGBEfVJoQW9KQ3VFSF9lQEh7WHpAcUt6QWdOYERnSmxEbUh2TGFQdkhjSmpJX0t2SnFNfkBu\nSGdJcEpqQ3pNcERiUnhBYlBmQmhJYkJ8VmJAbFFmRWhuQg==\n"}]
     * has-more : false
     * more-available : no
     * total : 4
     */

    @SerializedName("has-more")
    private boolean hasmore;
    @SerializedName("more-available")
    private String moreavailable;
    @SerializedName("total")
    private int total;
    @SerializedName("list")
    private List<ListBean> list;

    protected TripListResponse(Parcel in) {
        hasmore = in.readByte() != 0;
        moreavailable = in.readString();
        total = in.readInt();
        list = in.createTypedArrayList(ListBean.CREATOR);
    }

    public static final Creator<TripListResponse> CREATOR = new Creator<TripListResponse>() {
        @Override
        public TripListResponse createFromParcel(Parcel in) {
            return new TripListResponse(in);
        }

        @Override
        public TripListResponse[] newArray(int size) {
            return new TripListResponse[size];
        }
    };

    public boolean isHasmore() {
        return hasmore;
    }

    public void setHasmore(boolean hasmore) {
        this.hasmore = hasmore;
    }

    public String getMoreavailable() {
        return moreavailable;
    }

    public void setMoreavailable(String moreavailable) {
        this.moreavailable = moreavailable;
    }

    public int getTotal() {
        return total;
    }

    public void setTotal(int total) {
        this.total = total;
    }

    public List<ListBean> getList() {
        return list;
    }

    public void setList(List<ListBean> list) {
        this.list = list;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeByte((byte) (hasmore ? 1 : 0));
        dest.writeString(moreavailable);
        dest.writeInt(total);
        dest.writeTypedList(list);
    }

    public static class ListBean implements Parcelable {
        /**
         * id : 414
         * tripId : 1557888658481
         * refStartpointId : 3133
         * refEndpointId : 3134
         * tripName : New
         * tripDescription : null
         * beginTime : 2019-05-17 12:55:00
         * endTime : 2019-05-18 12:55:00
         * creationDate : 2019-05-15 02:51:00
         * updationDate : 2019-05-15 02:51:00
         * startPoint : {"id":"3133","refTripId":"414","lat":23.810331344604,"long":90.412521362305,"type":1,"address":"Dhaka, Bangladesh","fullAddress":null}
         * endPoint : {"id":"3134","refTripId":"414","lat":22.356851577759,"long":91.783180236816,"type":1,"address":"Chittagong, Bangladesh","fullAddress":null}
         * wayPoints : []
         * points : []
         * markers : [{"id":"2350","userId":"6","refTripId":"414","markType":4,"lat":23.81069198,"long":90.41236715,"radius":0,"address":"517/3 Lane - 10, Dhaka, Bangladesh","fullAddress":"517/3 Lane - 10, Dhaka, Bangladesh,Dhaka,Bangladesh","description":"demo","tripSpecific":1,"landmarkImage":[],"locations":[{"lat":23.81069198,"long":90.41236715},{"lat":23.81001978,"long":90.41228056},{"lat":23.81017638,"long":90.41345178}]}]
         * reports : []
         * friendShared : 5
         * friendAttend : 1
         * tripJson : b3NnbGxAbX1pbWtEb0BtYUBqXXNBYl1pQmxEb0B2SXNDQ3RUYUJ4T2VEYEt7RWBHa0psSmVQfEtj
         U2RMe0xiRGtHP21LfEB5THxBe1RsR3dBZEF7R2pOZ0dqT3dDfENvV3hYd0F0QGlCUndUZkN5VGxD
         eVx0RndCRGFBSm9AdEBxQG5BX0NsRHFUdlFxUXZMfUl0RmRJclhsRnJQbkJwRmZCZkVuQ3RFfkRg
         RmxQaFZ2RWBJYkZ+SHJEdkhwRHhIaF1qeEBiSWZPdEdgS2pJdEx6W3BiQGBqQHZvQFVoSHRqQG5M
         bGBAeEZ4ekF6T2RrQXxKfktmSXBrQX5IYHpAYkl2bEJ6Un5wQGZHbG9CcE1kbEFwTm5LZEF8eUJg
         U2JIdkB0cUN4V2xEYEBsYEB8RGRPekFqb0J6UmRBSmJNbkF4Q1hoR25AdG9AeEZ8RWBAYHdDbFdg
         aEZoZkBgUU9oe0B0SGx9QGxJZHxAbEliRWRAcHpAdEl2V3hCYkJMflB6QXJhQW5JZERYfERQYEhK
         dkRcdnZAd0ZoYkBlRmJZe0VmWHlGfFl5S2xWdUpsTXlGYFBtSWROX0pyWXNTdEdrRXBMfUhmbEBx
         YkB6SntGZEZfQ3xOa0R2Z0BxR3JEaUByRV9AdEs/ZkZCdklQelV+QnJTZkJ8dUBuSH5QbEF+cEF+
         TH5sQGJHcGFAdER6c0FqTGJ5QHZKaEFlQmJCZ0FwQmFAdkJEbkBSfkBYekFyQWJBdkJKfEBqZEFi
         SXR2QHpHdFlmQ3puQXJMcHBBaEt4cUF2S3pEVGBAdUF0QGVBZkFxQHJBV3JBQnBBXmJBdkBQVE5Y
         bGdAe1FsaEB1UnpPZUdkSnlDYktzRWhWZ0x6VWdMekp1RXRNb0h4R3VEbEN5QWpMcUdkS19GfmpB
         c21AYlJjSnpaZ09mdUBxX0BmbUBpWnJUa0xySXtFbEl5Rj9PP09Qc0FiQGlBdkB5QG1EcVB5RF9R
         ZURpTXlDfUxnQ2NMcUFhSGFBeUd7QHVMTWdJRGNNV31OTm1MWm9MZkBxSm5AZ0poQF9HbEF3SGhB
         Z0duQnFJfkNpTGZFZ016QV9FbkJ5RWJEZUhoRWdIckVzSGZYZV9Abkh5THRDfURwQ3dEakR7RH5E
         d0VuRXdFZERfRXJAfUB8R29Jfkx9TWRZbVt0RmNJYkl7TWpVX2VAckZzSmpEe0d6QmlEbkprTXRA
         X0FsUWNYbGlAd3xAekZzSW5Hd0l2RHdFZFNfVnBMX1JwT2FXZlBlV25GaUl2R29LdkltTmZDa0Vw
         SGFMcktjUHBTbVhmW3NhQHhcbWtAfFdzX0BkWmFgQGpEeUV0QmFDdkV4QnpgRGp4QXBBaEBgRXhC
         ZHhAbGBAfmJBcmdAakV6RHZGaEdkVnJWalNyUWJJZEhmUXZMfFN8Snpedk54VmpHak90Q3JPakB6
         W2BBZldmQHJXQXhcTHJEQmxXRnJXQWRuQD9+a0BOdkhFeGZAaUB2V0hkbEBaZEVCakhkQmREZEJk
         RmBDYEBaZEl2SGRNfEV6R2BCdEZmQGBNUnBgQmpGYEVzQGpFeU9yRl9TfkRnTXhIY1RiSmlVakR3
         THhBeUlwQWNPdkBlSH5EeW5AcENnW3pLa2NCbkJ5SmZBZUh8QXdGfEB3QmpAa0BwQGlAakBZckBb
         bkBPakBRakBXeEBVZkFDeEtyQWBObEN4TmpCdEpgQXRKQmxXd0ByUV9Cck9vQ3hUc0N2TXlBbER5
         QHBDY0FoQmdBZkZfQ2pDc0FgR3lFZkh9RXBPe0piQ2lDZkxrSX5hQHlYYEpvRnRWaVB2RXlEbEVx
         RXJCaUNkQn1DeEl5UWhKcU9kU3Fdakd7THRJd1FuRX1MZEV9UHpReW9AaENvSXpEX0twRWtMbk1l
         VGZmQX1jQnpTX11wRH1GalhlZkB4XnFwQHhGZUtuR3dNZEZ5TmBEY0xkRWVRbk1fcEB2WmtoQnxB
         ZUpmR3NbekRzU35Ed1FgRV9PYkV1TWhIY1RmTHtbcE5xX0BoVnVvQHZ6QHd4QnxHaVB0RW1NfERh
         TmBHd1FsS3VbfEdzUnxIb1NkRXdJfFJlZkBsTl9aeE9zYEBoRG9KckZlU3RNbWhAZFJ5bUBuZkBt
         cEFyTndfQG5jQG1zQWhEd0pyTW1fQG5Se2ZAbkhzUmhlQGtxQXJBeUNgS3lWYFd5bUB+Wnl6QHZK
         fVZqVWFvQHhLd1Z0XnVgQX5SYWpAYFBtZEB0S2VYamdAcXNBdHNAcWxCdE1rXn5Ma1t+XXliQWRL
         dVZuYUBxZ0F4YUBjZUF2YEBzZUFsWG10QGRLeVlsTm9gQHZNbWFAaFBjbkB8SWFlQGpGdWtAeENn
         XWpDa3FAcEFrZkBoQF9dRmthQFtrVG9AYV53Ql9qQHlBb15rRHNrQHFPY31Cb0Z5e0B1RH1cZUJj
         VXFBZVVlQG1UU2FPaUNfYEB5R29oQW1Dd2RAY0RhZ0BtQ29jQHtDZ2ZAdURjc0BxQ2VnQHdEX3NA
         Z0RjaUBrQWtQZ0JxW3lCbVh5QWdZdUJrYEBzR3FkQXtEdWhAb0JhbEBtSW14QXdCaV1lQWdVcUxn
         dEJ7QXNbZ1B5ZEN7QHtMbUJxWHtCX19Ac0tnZ0J7Q2dnQHtAaVd3QW1We0NxZkBvR29nQWVFfWpA
         eUxnbEB9QndJe1pvZUFvS19fQG9iQHN4QWlQb2ZAdV1hd0B1ZUFneEFvcUB9fEBncUB3fUB1T2tT
         aUVfRntvQWlgQm9uQW1iQntGY05nS2dSfUxrU2NJc01tR2dSZ0NhTHVBcUpvQXlIX0FzR3lAe1BQ
         eVRwQV9TckFfU3ZDX1N+RGFTZEh9UWRHcUtoVWlcalZhW2p1QHFkQWhTbVlgU2dXdE95U3Z5QHdn
         QWRBeUFqXmtoQGZ3QHljQXRNaVFqaUB1c0BqdEB9YkF0YUBjaUB0VXFdcHJDb3pEfGZBcXZBZGtB
         cXtBclBvXnBNfVtsT2dzQHJEdVFgUnF9QGxRc19BbkRpT35JbWJAZEl7YEBwRG1RbEFnR3hJdWFA
         bk5zY0B2RndMZEZnSmBJaUpsSnFJckNhRGxJbUpmSmdMZndBX3NBZmxAYWhAemxAbWhAdl1lWmpC
         d0FkaUB7ZEBydkBpckBmWntYemRAd2FAdk99S2ZTX0t+bEFtaEBmeUFzbEBgRXlCam5Ab1hgbEFf
         aEByb0FlakB0dkF9bUBqV2tLemhBd2VAbFFpSXpwQWlqQH51QG9bdm5AaVdyYkFfYkB8UF9JZmZE
         Y3RBemlAX1RobEB9V2ZhQm9yQGxhQGFSbGJAX1dmXHVYZFpxXWBaaWNAaFN7YEBsUHlbYGFAc2pB
         YGVAfWlBaE11VH5iQGN2QGpjQG96QGh3QWd8Qn5Pd1dkZUB7fEB+aEFlakJ0eEB1eEFgTG1UZmhA
         ZWpBYmxBb2RDdGBBe2lCcmhAbWZBZGJAX3hAfEZpS2BedXJAdGNBYW1CaFhtW35Cc0J2VWNQZmJA
         fVVkb0lnckR2bkBvWW5ddU5wcUBjWXhwQHtYZlV9SHRhQHFRbFJrSX5QZ0pkU3VMfE11THBQe1Bw
         W19jQGpKdUx2aUBxc0BwZUBxbEBsbEB1dEBkeUF7b0JsdUBvYEF6UXlSbFJ1TnJQY0twV2NPZmdF
         d35CfF9CY35AeGJDb3NBeElpRmxYZU9mYEBrVmRnQG9WcntBd3tAfkZtQ2ZYcU90V3FRYExhR3BL
         X0Z0a0BtVWhjQHVUanVAZVpwZUBpSGxWYUR0akBvQmx0QG1BelVjQW5UaUF2WmdCaFFfRGxmQH1J
         bF57S25+QG9dcHxAX112fEBrXX57QHlcYnxAcVxwcUZpdEJ2XWlPdExvSWxKeUloT3dRdE1zUXRI
         bU5sSG1NYEZrT2hIb1FkRWlMZGhAd19CcFh9eEBoWmt2QHxReV5qUGlXZEFhQmhiQHtqQHZkQGds
         QGxmQHVtQHp+QWlxQmB1QHV8QHRSd1JiaEFxZEFkZUBvY0BwY0JlfEFwcEJrb0JwSGNIbm9AX21A
         eFttWmZdeVtybEB9aUBgW3FYeGBAc19AZGdAc2dAdGhBfWZBYnlAdXZAdm5Ab2xAYElxSHh0QG1x
         QGJFeUN2YUBnWXZ8QGthQH5Jb0V+Wm9NfmBAYVF2bEFla0B4Y0J5dUBqeEBxX0B0ckBpWnBGeUJw
         c0B5XWRkQm11QHZhQG9RdEdzQ35qQHNXaG9Ae1l6VmdMdnxBe3NAcmBAc1J+UXFNYElnRmRiQHVl
         QGhEaUV4ekBrZkF2S2NOemVAe2xAamZAY2pAZnFAfXhAeFNlVnBXcVpkYEBrZkBwVXlacEd9SXJE
         Z0ZybUBrdEBwfkFpa0J4YkJvc0JyT29Sdm9Ba3tBdF9Ae2RAbmhAX29AfkRfRmxPbVNsZ0B1akBs
         fkB9akFoaUJhe0JmdkJpbENkUW9SaEp7THBoQGNyQGx1QGV9QHpGeUdqbUBlc0B0WF9caERhRWhc
         dV5ibENnfUNkaEFtbUFkZUF1bUFqfkB5Y0FyekBvYEF0d0BtfEBodkBrfkB2ckBld0B2cEB3eEB6
         T3NQdlNzVHx8QHtkQWpgQHNhQGBOYVB0TV9SbFF9XnZGc096RWdRekVvWHJBb01yQGVOZEBfX0Bp
         QGNgQG1AZVh3RWFiQmdFc2NCcVBhe0d5SWNyRGtIa3pDX0VvdUFvQ3VqQXNCaWdBdUtraURpRn14
         QG9Ec2tAc0FtaUBIbVRnQHtUZ0BhSHNEc2RBbUhndEFjRWNba0JvTnNJbWRAe09rd0BhU3N3QG9r
         QGFrQl9fQG9qQVd3QXtBY0ljQWFPR3lbfkB5WGJDYV10RmtWbkd5UmJ9QGFlQ2B4QG9uQnZ7QGt6
         QmZdd2NBYFtzZUFgZEBlYUJmSmllQH5Ee2lAbkBpdkA/dXZAZ0JvY0FzRndjQXlCZ2ZAYUZtdkBf
         Q3doQHtEaXFGbUJhcURpRXFnQnNNZ2lDe0ttdEJtR19oQXVAYWFBd0BtaUFCZWxBZUJzcERzRGtt
         QmdLfW9CX0VvaEFXbXVBVm9uQ0JjTXNGY3RDR3dBX0plfkJhQXFXa0N1fEJdYVlXZVJlQXNyQF9C
         bXFAdUVxfEB5RG1sQHlCY1lnQmVXaUV1aEBjTHl7QXNFcXFAcEFxdEBqSW9mQnpGb2BBZERnZUB6
         QWFUfklpc0BkTmV8QGpFcWJAcEB1UklxU21NfX5CX0BxY0FRa2hAdEVlZUhxSWN0RWtJd3BBa2NA
         ZXNFX0VnYEBlVmdfQ19adXJDd0V5aUBzSG17QGtLfWNBb0lvZ0FnRmNxQGVRZW9BY1Z1b0FvZEB1
         Y0NvQntKaURzUWFFY1VZe0FtRGlXZ0BzRGdCa1hFa050QG9dakNjWXhGcVluUnF1QHZDX0xsW21s
         QXpCdUlsSHtaYkVpUmRKbVRkR21MbkJ3RGZoQWlxQXxfQHVhQHxgQGNjQHxed2JAel1jZkBudUBt
         fEByV3dabEFfQnxuQXlkQnhwRGN1RWB0QXdoQnJhQXlxQWBZX3NAaFt5eUF+TGdwQG5MX3NAfk1h
         dkB+T3l8QG5Yc3FBelljYkJ0aUBrZER2ZEBhZEN6bEB7e0J4Wl9lQW5YdX5AcEdhWHhMX2dAeG9A
         eXlCZlNzdUB2VH1zQGhjQGNuQXRLaVVoZ0BlZkFoTn1ZbkppU3RUYWBAbmRBe3dCYnNAaXVBdmZA
         cX1AaEdlTGpzQXlpQ2poQXdsQ2hlQWl7Q3ZMZ2ZAaEVha0BDaWZAQ3lsQHNDb35BZkR1YEJuQnN3
         QGRHc2RDakVhYURpQHVoQ2NHeWZEbUJ9ZkFpS2t4Q2dId3FCc0R7ckJVbX1AYkZzfEF2THl5QnpE
         Z2ZCTmNHaEZvYUR4RHFuQXhLb2tBblJ7bEFqQmFcXWNcd0R5aUBzRnNoQGFHZWdAaURxZ0BxQHdj
         QEBhY0BXa2tCQ3lxQnxAZW1BckN5bEFgTH11QX5PY3VBYGlAc2BEZmRAZWpDZENzT3BFaVtwR3lj
         QHhAfUZgRmFeek1zYEFiRXlcakR5V2JAYUNwS2t0QHROfX5AZkZtYUBwYkB1Z0RwakBxdEVsQndS
         ekF9T2BGcXhAYkBxR2REeWlAWGVKZEZ5YUJuS3F4QW5EdWZATHFOekB3ZUBVc2RBakJzd0B0SmN0
         Q2ZEd3hAYkB1S2RHb3tAbEFzSnRQZ2tBcFd9Y0JmY0Btd0N6RV9cZnFAfWlFYnJAe31FZEdtYkB+
         Qm9PelljbkJiS2VhQWRBZU5yQW9RZEJtXn5Cc1JqQWtJYkNlUWpHd1liTG9oQHBEdVB4d0B5ckRs
         V3NsQXJDd0xiSXdccF51bEF4T2NvQGpLZ2JAfl1nd0FsWWdqQWJFcVF8QntJbF1neEFwT29wQH5l
         QV9zRXJSaWFCZEFtTWBAX0ZMc1RMZ29AbUFjaEBnQ2teYUJhUGVGcWBAeURvWnlBeU5zT2t3QXdE
         ZV1jQnNdW31PVHdPfEB5XXBCX1JwRmtnQHJIX1x6fkB9Y0V+Umt3QGZ8QG9rRGhFY09sSmVccGhB
         d29EbFVpbUB0YUNzbEdkXF9xQGRLcVdoR29TaEVnVWxDb1ZyQWNad0NlbkF9RHtsQXlEZ3RBZkN3
         aEBoR3NgQHhabX1Abm5Ae29BdlRra0B+THtwQH5Ba1xIe15nQn1rQHFKY3ZBbVVhZ0J7VGlkQm1P
         d2RCdUR7YUJXcX5FZUV5fUViRGl+QHRWaXBCfEpndUBkQndZakB1XHlAaVt1Qm1cdUNjZ0JoSHFm
         SmBAeW5BdEZ5Z0BsSmVmQGRpQGdtQXpzQHVsQXJ8QHdzQXRiQHFoQGBQZ1R+S3NVck5fYkB2SXdu
         QHZCY3VCeEFjZEJmRG95QmREY3ZCbkJpeEFSeV1lQF9IW3FId0FjT2VFc1ZvSX1cYVZ9ckBxQG9C
         YUpjWn1He1lhUV92QGlOb3hAY0Z1X0FoRXt7QHJOZ3pAcEJ9S2pKbWpAeEZ1aEBwRX1mQWxDaWNB
         ekJnbUJReWtAX0F3a0BlSW18Q3dMZWJFcUh5YkJhQnddY0FvVHtEfW5AcUZ7bUB3RmFrQF9BfU55
         T29uQnVCaVlfQG9LUHNGRWtwQEFnQ1J7eEBGc0lQc1xXe2JAQmtlQGtAZ2NAa0J9cUBXZUtBeURz
         Ql9iQGtAZWJARW9bakJna0BuQW1UdEBtV0lpT1VzS0VjQ3dAfVBpQmVUb01rZ0F7T2NxQWFXZW5C
         Y0RpYkB7Q29SeUB1UWFAeU1cYUxkQH1NeEFxTWxIb19AYGVAc3dCeF9Aa19CZEl3WnZDcUx8R2FY
         Zkh3WWJHZVR4R2dRZkdjTmhJbU5mTn1VclB7VXxJeUhmSGtGflF1TmpXaU5sR3tDYEprRHpEeUFg
         S3VEdkZ1QXZLdUJmVndFenFAd05sX0JfXmx6RHl5QH59QGlSYGJBaVRsY0NfaUBodkB5T3J1QF9Q
         fHxAZVJ4fkB5U2J7QHNRbndAcU9oWGFHdlZ7SHxVdUh2cEZ7c0JyeEB5WnhlQndwQH5zQHFYeG5A
         bVZ6Z0FnYkB8a0FpZEBkZEFjX0B8QWlAcGVAdU9wWWlKcGlGX2NCamBAeUxsY0FfXHZlQXlcdGlD
         X3pAdGFBb1puX0J7Z0Bod0FvY0B2ZkFhW3BmQG9Lel9AYUlqb0Nlb0B6WGFKYlh3THxTcU1yUmFP
         dE55TmhMdU12QWNCaExnUWxKaVJkUWFhQGJjQWlwQ2BtQGlfQn5Yc3dAcE99YkB+W298QHxadWBB
         cFpje0BuXXlhQXJFZUp6VXtyQGJ7QHV3QmRdZXpAdk9fYEB4QmFGfElzV2xId09wSW1SelRtaEB+
         c0B1fkFseUBva0J+YEJ3dkRqekB1bUJwXXVlQXBJZV5uSV9hQG5Nc2RBdEx3bEJ6ZEB9bkh4akBr
         aUpmQGNKZkJnXHRSc3NDcGdAfWxJZkFtUGZHY35Aek1ncUJqRH1XdERpVWxDZU9uQWNIfkZfV3pJ
         bVx+THFdbFlfbEB6VWFgQHJWZVx0dEBzdkB0ekBhX0F+XGVfQGpfQ2NlQ2RSfVJ6ZkJja0J6RmdH
         ZkNtQ3JvQHVyQHJwQHtyQGRtQGtvQHh4QH17QHhGY0dgVXlVfmJAd2RAaGdAZWVAdF15WGZIeUZu
         dkBjbUBodEBra0B4YEJnbkFia0B3YkB4ekFtaUF2UXtOcGpCd3lBYGNCX3FBZmlEb2pDbGZCaXVB
         eHFAfWdAbmpAZ2JAYmVAY11gbUF3YUF8ZUBfXWJnQHNeZGtBX3ZAbE1xR3hgQWttQG5iRGFyQnh5
         QHdnQHxlQWNwQHB9Q31uQmxVeU52Z0BpW3JjQHVYaGhBeXJAcHBBc3RAeHdBe3NAbGVDYW5BemBB
         e2VAZG5AbVpwUGVJclV7S3hYcU52bkBtV2p0QHlXYGNAY1J8Y0BjVWZjQW9vQGhoQGViQGJkQHFh
         QHJzQG1oQHpkQGtbbkhhRnp0QHFnQGxsQ3dgQmRHb0Vye0J9YEJ2Z0FvckB6Z0FnbEBoWV9PeFl3
         TmZYdU90WV9TZG9BZ2VBfnpCeXNCdnJCYWlCaFhlVnRkQG9hQGJJYUhsaER7dkN8bUBxZUBqZUJx
         aEF8WXNQbmRDaXZBZH1BZX1AamNBX3BAbGhEZ2hDbm9DfXxBYGRCZ3xAZGVBX2JAcHxAdVhoeENr
         d0B8fkFfXnZqQW9VZHZBcVZ6cEBjTHx3QGlQYFplSn5yQGdaeGFCYXRAen5CbWVBdmxBYWlAYG1A
         cVFyd0B5UG51RH1vQH5tQXFPcmhDX1N+U3FCdGpAd0h6ZkFrVnBtQntjQGxpQ19tQG5rQHtNeGRB
         X1t6a0BnU2BhQGdNfFtzTHBUcUtqU3FNdld9U3RQeVJye0FfeUJgXWtnQHJgQHdeZGBAc1Z4cEB7
         WGptQWNnQHJrQnV2QHpkRHt0QXp2QF9YbF9AdUp6YkB7S2pkQGdKfk1vQ2BgQG9KYGJAc050Z0Bn
         VGJyQF9dfnRAd1t4W2FPalhxSXZbdUZmT3VBYm9AfUZmbEJ5TXJtQntOemxBa0pqYUJrTXRnQH1E
         YlRhQmJ6QnVGaHdBb0RmdUBhSGx0Qm9mQG5ZfUdwYUBjTmRmQmNsQHZLcURsT2dGdGdAY1J8ZUF3
         W2hoQHFNdnhBc158b0BnUHhqQmloQGJKZ0N8dEBxUXJhQHlKZmBAa0ZuQk1iaUBvRHpkQHlAemdB
         QmZ9QWVBekBBbFpTan1DbEFsTER+cUBjQmRPP2hER3xdfUJ6U3VBemFAb0Nic0FnUGxmQGtHdHNA
         ZUpsZ0FrTnpsQHFCfm5BcEBwbUN2QX5QSnJcUnxsQF9AdnBAfUVya0B1SGh7QHtNaHxAeU9oY0Jx
         YkB4aUB1TnZRY0RiW2tFdGlBaUR6ZEBpRHpqQGNIfnhEeV5iXntEdF9BZ0tkaUJ1SX56SWl8QGRX
         Z0N4cUBvRXZAR3RyQXVJemZAY0RyRFdufERvY0BkTXNAcnFBbUhwR3tAeHJBYVFmTG1DdHxAbVtq
         Z0FrX0BweEB9WWBgQHVKbkNtQGBOdUNuWnFDfFNHfmNAcEBqV2BEZkh6QHhGckBibkBkTmpFfkBw
         a0F4VmxcckN4W3BCaltLZnlAa0RkR1l+Y0J9SGZHWWZhQmlDeGlDY0VmekJtRHJBQ3hoQnNDeGNA
         X0FmT1tgZEJhQ3RMUXxvQWVBcGRAX0BodEBtQHxvQGlAdntFbUhwbkBnQmRvQHlIcmtBYVxkZkR1
         ZUFqdkV1aUF4e0B3WGJ9QF9mQGR0QXFwQG5gQGNKemZAe0N6aEBPcnNAaUBsY0JyQXJ1Q3xIYmxB
         bEl0Z0BgRXRkQGBBYlA/eFBnQGhlQGNFYmBEdWJAcndDdV5wcUFjVGRjQ3F0QHRtQ2N5QGhzRGdw
         QWpHc0JiakVndUFiakJldEBkdkF7cEBmfURneUJ2bkBpXHZ+Q3FgQm5lRG97QWJ0RmNlQ3RxQ2lw
         QX5jR2NnQ3ZyQ2VxQWBmRHd1QXBgRHl7QXx2QnFjQWRkQ3dtQXxiRWlxQm56QXd3QHB2QmtkQWRs
         QWttQG51QG1fQGxhQHVTfnRAbV1sTV9Ibl9BX2dAamRAa1VsW2lQdGZAaVZ2VnVLflZrSXxOa0Nk
         TGlAZm9Ae0Z4ZEB1RGpZe0NiVWdFfF1tSHp1QHdUdkJtQHpzQGlSZGVBbVl0X0B3SHpSbUNsWGNA
         emBAP2JtQXhCbmlAdkF6WkR2ZEBvQnBjQGVEcF9Ac0V+TnlDfnREY29AcnZBa1ZyX0draUF+fkB7
         UnBrQXdRanlAfUlscUBxRnBNbUBuWXNBZm1AX0J6Y0FhQmJ4Q2lGdlBbdn5BdUN6UnNEZEtvQWxa
         WWhiQHtBfEVHclFVZG9AZ0FiUGxCcEhsQHhxQGFBZmlBdUJiSEFkfkFtQ3BrRXJGcHJDbEVmfUNg
         R3p1QGxAdGFAa0JqXGdFeGBAaUhoZkB1TnRlQGlUcldjT35db1d8VWtWdGNAb2hAaHdAaWJBfGhB
         aXZBcmNBX3BBaH1BX29CbHZCd2hDcnpBb2VCaGZBZ3lBfHhAfWVBamlBZXdBenFAfXlAcntAZWlB
         dGpBe2FCem9BdXNCcF5lcUB4dEN5eEVoe0FxZ0N8bUJ1YUR0eUR5cEdgR3lLdm9BbXRCcGdAYXhA
         ZGZAe3FAellpXnZpQX1tQXBxQWVxQWhrQ2NvQ2Rdd15+bUJrcEJqU3NRZFp5V3xsQmVuQn55RXN4
         RWpxQWtuQWZ2SV95SXZnQGdrQGJjQHFtQHB8QHt5QX5sQGdiQW5mQXFnQnJxQGtqQXphQGd9QG5x
         QG1rQm5oQWt6Q3pmQHNlQX5TZV9AdmFAX29AZHJCbXhDfGJAcW5AfmBAe21AZk5tVWxNYVZqU2tk
         QG5hQGFrQWZPc19AalBvXnJPbVxoT31YcmxAZ2VBdGxAY2NBfmxFbXpIaGdAZWRBfGlAYXJBdndB
         b3FEZmRBfWdDcEx3WXhqQX12Q2BRe21AZElvYkBoS3t1QH5Ec21AWHdrQFtpakB5QnV4QG9EZV9D
         cUp9e0V3RXl9QmtFa29Da0JtYUFrQm90QGdDcXNAeUVpcUBzRm9uQF9Ie21AaVZjcEJfVXllQm1I
         eX1Aa0Jtb0BAdWRBYEF7bkBiQWtwQGpCeW5BdEZjeENuSXNhRmpBfX5AfkF3d0BgQm1vQWJDd1x+
         RHVdeEZ3WWBOYWhAaEhhUXxLc1RkT2VZbkhrS3ZIa0l+WW9ZbFdnVWxoQWNgQWxEfUNydUBhbEBg
         THlIfkxrR2ZhQGlRbnhBX2xAemNEY3VBfnFCaXpAeHVBe29AcnpBX31AemBCe2BBYl9CZWJBenBA
         dV1kbkBpWH55THlxRWJvTnt2RmBzQnt4QHhsS29lRWZ7SHt7Q3R+QW9mQHx5QHFSbH1AY09uX0Jp
         U2R7QntSandAY0pwYkBzR35hQF9KdHFHZXhBeHNFb2hBcndFcXxAcHlFb2NBYnJCZ2RAZnJCY2hA
         ZmhGfXJBcH1NX2pEZHJAcU5ockBnSnJwQWFKdHVBdURsYkl3VHhxQWlEdHVBfUN8ZEBxQmRtQHNB
         dGhAYUJ2YkBtRGZcZ0VqaEB1S25qQWdaZnlCd2tAaH1AaVZ4eUB9UmBlQG9NZGZAYUxuVF9EelNj
         QXJqQ21EbmJCeURmbEB3RH5YZUN8VHVDcFN1Q3pIa0FiakF5UHBTb0NsaUNhX0BkS3FBdmxCfVdq
         X0B7R2xaYUdocUB5UWxZdUpyYUFlXXhfQXFYfmRAb01mdUBvUXZOX0R6SGlCbFdjR3Raa0h2WWlI
         ZGBBcVR2cUBnUGZNe0N4TmVEcE5rQ2JOX0NkUHtCdmBBYUx8WmdEeFVpQ2p1QGtKbmdCZVl+YEVh
         cUBiTn1CZGRAdUtgZEBjUGZiQV9oQHJVb01iU3tLfE9lSXZHc0RqT2tJflFvSGBZbUp6SG1CfElf
         QnBUY0R4SWdBbEphQXh7QnFWcGFAc0dmRHVAYGtAe0xucUFfWnRLa0NuYkBjS3hrQHVNcmdBe1Zu
         Z0BrT2BtQHVTfnRDYWZBfl9Bb2NAdmBBe2VAaF19UGZaY054Q3VBfmJAd1J6THtFek9hR2pkQGlR
         ZmhCa3BAekVnQnhGdUJme0Nra0FkSXtDbklpRHpfQGtPdnhAeVtycEJ7eUB6SHtDZlNtSW5YaUt0
         dUBlWHRcZUtwT3tFfE1xRGRfQGFLfF5lSmJQX0Z0WWlLbk1rRm5MYUdqWGlPall3T2JaZU9+TnlH
         aE5fR3xBa0B8Q2NBYE1fRmBTZUh4TGNFflptS3Z0QHFWaHZAdVhwQ3FBZl9AZVFsYUBpVXx+QHNq
         QHhReUtwZ0BxWm5hQHlXcmRAfVx+fUJpYkJ2eEFpZkFoRGdDYF9Ca2pBbnlAdXFAdl1pW3xPc05u
         a0BhaEBia0BvZ0BsdEFhb0FkUX1QemBAc1t+YEBrWm5hQGNaaFVzUXpFe0R4RHdDZmdAeV54S2VJ
         bnJAYWhAbGJCb2tBaHZBa2NBZk9pS35TZU9wVXtPZEx9R2hFX0NwRl9EZFZnTmJzQGtbYnBAb1hk
         fEF9cEByZEBzU2ZmQH1TZm5Bb2RAekpxRHRZcUtqZ0BtUHhvQXNcakx7Q2JkQHtMemtAZ094SmtD
         YE17Q2ZVaUdsU21GeFZ9R35+QG1VelllR35EeUB6QmNAYEtzQWJvQH1IfFJrRGxUbUVofkBxVGBO
         bUNmcEBvTX54QHdPbltvSH5bc0hwbkV9aEFwaEFtVXJQa0RsS31DbkRjQXReYU14XmdQeHVBZXVA
         ZkpfRmhfQF9Tak1xR3ZVcUxmZEB5WHZXcVBwWWlRaGpAd1luRWFDYGdCZXpAclVnTWZkQXFqQHpI
         cUV+dUFpeEB0Y0BpVWRfQGdRbmdAaVZ6U2dLcl17T3RMdUZ4YkJ9d0BqTWVHaGhAc1ZqbENtb0Fm
         fkJvZ0FiSmlFeGVAd1RiXHNPdHhAb19AcnlAeVx0eUBhXGBlRW9hQmZiRWFgQmhrQXtkQGBqQGdV
         eG5AY1ZoZkJ9a0BwYkFzWX5qQmFoQHBbeUluS2FFcGpAYVRoSm1EclVtSnhwQGVYblZxSnpxQGFY
         dFJjSWBTeUtkU19NeFJrS2hDd0F0YEBnVG5Od0d4T29HYk15RWBTd0d4XX1LcFBfRnZPc0R2YkBh
         S3RgQHFMdn1Aa1l2Y0BlUGZlQHlOcGFAYU5uYUBrTH5jQHNMbFVlSGRlQHdNdk57RGp7QG9VanZD
         b3VAdHtBc19AaHNAY1JodEB9VHpjQH1PcmFAc1BiWHlLYGhAe1N4YEF7YEB4YEB3UHphQGtReHhA
         cWJAfmtBe3BAdkR3QmZpQHdaYFhtT2RZZ09ibUB9XGZDeUFkYUh1e0RgcEB1X0B0XG1PcE11RnJO
         fUZwVWtLflRxSnZZfUtgWHFLZGxAc1VwZ0BtVHpMfUV2dkF1akBmZUJxdkBmfEBpYEBuZkBtVWBp
         QG9WcHFBZ25AfHNAX11ieUB7X0B0W2FPYlx9Tmp4QG1fQH5ad09sSmNGbGRAaVZoZEB9VGJlQHNT
         YndAdVxgd0BrXH5dYU5kX0BxTnx7QGtcdlpxTXxbY1FueEBxZUB2Xn1Uel9Ab1RwTWtIfE5nSXpT
         eUt4fkBnZEBkeUJpY0FsYEBhUWxMZUZ+WF9NeFlzSXBhQHdMWEliaEB5TmpYa0hsYEBhTXpiQHdM
         cmZAfU5oWWFJYFprSm5bc018X0BxUWJkQF9WZFxzVWhdX1t2T19OZFVtU2RPd09wVmtWbFdpV3RU
         aVRmT3dMYk9nS3ZCc0FsUHFLZlpzUHZWa01mW19PelphTnBMe0Z2XH1OelRpSm5PZUlsV29LeFZr
         THZNc0d8XnFPfFhxTX5cb09+S2dGeFNfSmBZeU1sY0B9UXJTZ0p8XmFTcmdAYVpoXHFUfGdAc1xq
         YUBlWGxXcVBgW2lSall1T2ZdZVJyXntSZlJjTGJJX0ZoXGVTcl9AeVV+T31KcGZAd1lsZEBfWW5i
         QHlXdF9Aa1V6ZUBzWnxnQGdbcFR5T25kQGNYdl1fUnBgQHtQbGVAfVNmZUBpVHBac1F0WXdQdFJz
         S2hrQGFQel9AbUpoZ0BjTXxTdUdia0BzUWxnQH1PdEl9Q2R1QGFWdnZAZ1hqWX1JemZAb090XHtL
         cFp7SmRcYU12W2lMfFNhSHZXb0liV2VJeGVAe094RX1BcmJAeVF0d0BzXHhjQGtPdFphS3p0QG1W
         bFV3SH5mQGVRfG9AdVRob0B7UWBgQGNMYlZ7SXphQHNNcHNAb1JqaUBtTmZ0QGVVYG9Ac1BmdEBx
         T3RmQGNKdmxAcUt2c0BnTX5yQH1OZHBAcU14a0FfVnJfQWNUcmtBaVV4fUB9UHZiQHVHenRAbU1y
         ZUFjU25sQHtJem5Bc1ZydEFtU2JuQWNSbntAd05mcEBzT35lQGFPdHBAc1R6bEBvVHp4QG9caG9A
         dVx2WXFRbGdAaVlockBvYUB6ZkBlVnpkQGlZbl9Ab1lsW2lWaGdAY1lkXnVQfmRAcVNiaEBjVHZx
         QHFWdmxAYVJqc0B7VXJ8QHtWbndAa1V0ckBpUHp+QGNWbmZAd05qYUBnT25kQGlQZmVAZ1J+aUBl
         U2RlQGNRfHpAaVxiekBzWXxyQGVZenFAbVh6ZUB7UXRdbU5qY0B1UHJ7QH1cZmxAe1RyfUBpWX5z
         QGFXbmlAbVJgYkBhTmZvQGVUfnpEd2tBcHNDcXtAYn5Cc3lAan1CZXVAYEx9Q2B6QGtVbnlDZ2JB
         aGxCe3NAbFN5SHRxRW9mQmhuQ2doQW5iQWFfQGJrQXFfQGpxQXtfQGx1QGFYYEx1RnRTY0tqUXdJ
         YnZAe2RAanpAc2RAbmVAeVNuW21OaH1AdVd8UGFGfGxAZ0x8Y0J9UnZjQGtGbmNDeVd4eUFlUHhf
         QWdLbnlBZVV4SHlBbnJAeU12V2dLblJ1SG5NZUZuU29JbkNlQWpBY0BiVmFKaFp1S2RWZUlsV2FJ
         elllSWxZeUdmV21GdlNjRnpRd0ViRntBYEhhQ3ZYaUtmW31MdFRxSmJWb0t0THtFbE1lRnBPfUR+
         V2tHbFZ7RXBUcUVoWX1Fbkx1QnZBV2RNe0JuUmVEbFp3RnJuQWVWamxAY0xqXH1JYmJAY1BiW3NM
         YmBAZU9mZ0B9T2BpQF9SYmtAY1J4YkBvTmJlQGNQYmZCY3JAdnJAa1hyaUB7U2xhQXtgQGhdd05q
         eUBfX0BmVGNNdk97Rmpda016aEBvUX5qQGNSfENlQWJhQG9McnhAZVdsbEFpXnJnQG1OcnhAfVJk
         ZEB3T2JacUpmYEB9TmZbfUx4akBzV2ZSa0liTHFFZEZzQXhCa0Bmd0BjVGxuQHdMemVAbUpwX0Bh
         SXxZdUh4ZEBhTHpPYURiWHtGdFRfRGZWdUNqWntDbFxxRW5LdUJmSmFCYE9jRHBcZUlsUmVGZlVt
         SGpTbUhiVHNHfFV7SGBca0lkX0B1S35eYUt0SXtDYFNrR3Rde0pkWGdHeFB3RXhLeUNgVX1Icl1n
         TWZWb0tsVHdJZkxvRXRFYUJqVnlIflBvRXpYY0hgX0BnTGBUX0h6VmNIZktvRGhNYUV+UHFGblB1
         RnhLdURgR3VCfklnRWhNZUZ6SG9Ebkp3RGhKe0V8SntGdEl7RWZIe0VySGtGdkh1RWBJcUV0RHVC
         ZkFvQGRIa0V2RmdEdEV1Q25IcUV+RnVEaElzRnRHY0VoRWVDYEZ7QnpCX0J6SW1Gckd9RGpCYUFo
         Q3dBbEZrQ35Ie0VwR2tEZEBfQH5Ac0B8SGNFbEVlQ2hHb0RoQm1AfkhvRWBNbUdgRn1DdkRrQ3BF
         cUNgQXlAdEJnQWhEa0N0R2FHZklrSGRHcUZmRmtGdEVnRnxFbUd+RXtFbkNtQ3RGZUd8RGlFfkFl
         QnRHY0dgRW1FcERpRWBDcUJuRXlFZEhpSGpHa0h+R2NIakp7SWhVZ1ZwXF9dZElpSH5NZ0x8TnNK
         flFlTHpMYUhuU21LZFh3TWRaY052UXtHalVrSXxTb0l0THdFYl1nUXRHaURqZEB1WHhIZUZ4VmdP
         allfU2ZmQHFbbl9AZVhqW19UdFR3TWhWc01mT3VIdEllRGBGe0J6Y0B7TnRhQHdNdE15Q2xMZ0N+
         U31DdlxpRWZcfUVsTmlCZEVhQGJFdUBwTmlCflBvQ3BNX0JqR3VAckhpQWBHb0ByTHtBaEh1QWhF
         ZUBwTW9CYk1lQnBPdUJ+R2lBZk13Qn5JY0JuTndDbkxnQmZNd0J4SXtBfkhfQnRLb0J0Q2VAdEdn
         QWZKYUJ6THFDaFRpRHBNbUJ8TGtCeEtpQmpIY0FyTV9CZktnQnJJcUFyTmlCbEtrQmROX0J6TGVC
         cE9rQmBQeUNmTWNCak59QnRJb0F4SWtCYkt7QXhQb0R+S29CZk11Qm5Ka0JsYkFzUXpsQHFLdFph
         RnhZZUZ+YEBhSG5qQGFKdFp5Rn5gQH1GfnBAe0dqSWNBbUZfekBuVXlAb0F7ZUBzQ2dpQGlVXklj
         QndAd0V9R2tiQGtHX0RfUGNWa0xtZkFzTGlyQGFAc0pyUGFBcE1UZEVqSHxHe0RqSFtyS2dAfF1J
         alw/cEd6QHRGYkFuR3RAZEV6QHRLbkFdfEV0QnJvQHZIbGhBZkJ8UnZJeHlAZEt6eEB6QnxRbkJg
         WnRqQGFKeE93RGZOY0Zsb0B3WH5bZU1sYEB9TXxqQHNRemZAfU98d0BxVmxqQHdRZEllRHxOeUdw
         T2tLblx7U3BoQG1cclthVWRda1d8dkBtaEBsakBfXWxzQHlhQHZ5QGdpQHxUc1ZiVXNZYlhlYkBg
         YkBfcEBoYEBtbkBmXmlhQGZZY1VqXGtUaEdfRXhmQHddald3VmReZWZAaF9AX2hAdFh1XWBPdVR2
         TmlSdmhAZWRAYlVnU3JOZ01kSWlIZk9lTGJYZ1J4SHFFamhAfV56TmdLdGdAa2NAbk11TWRUe1Zm
         UmlcZkxhTGpEZ0V2Q2VCeHFAZWJAcld3UmZgQF9WYFRlTnpNY0pkSn1HZGRAe1tsVHlPeFFlTmJB
         d0BmV3NTbEN5QW5DYUFkSHlCfnJBcV1Kd0BacUBkQGlAcEBZckBJaEBCZEBKYkBUXFpkRT94X0BP
         cHZAbEJsY0B6QGhVXGZUa0BmXWtEcFljRnREdUJIYUBSX0BWW1xTbkN9RHhHYU94Q2dIZkVhTWZJ
         d1d8RmNUYER9UmhBb0pDdUVIX2VASHtYekBxS3pBZ05gRGdKbERtSHZMYVB2SGNKaklfS3ZKcU1+
         QG5IZ0lwSmpDek1wRGJSeEFiUGZCaEliQnxWYkBsUWZFaG5C

         */

        @SerializedName("id")
        private String id;
        @SerializedName("tripId")
        private String tripId;
        @SerializedName("refStartpointId")
        private String refStartpointId;
        @SerializedName("refEndpointId")
        private String refEndpointId;
        @SerializedName("tripName")
        private String tripName;
        @SerializedName("tripDescription")
        private String tripDescription;
        @SerializedName("beginTime")
        private String beginTime;
        @SerializedName("endTime")
        private String endTime;
        @SerializedName("creationDate")
        private String creationDate;
        @SerializedName("updationDate")
        private String updationDate;
        @SerializedName("startPoint")
        private StartPointBean startPoint;
        @SerializedName("endPoint")
        private EndPointBean endPoint;
        @SerializedName("friendShared")
        private String friendShared;
        @SerializedName("friendAttend")
        private String friendAttend;
        @SerializedName("tripJson")
        private String tripJson;
        @SerializedName("wayPoints")
        private List<WayPointsBean> wayPoints;
        @SerializedName("points")
        private List<?> points;
        @SerializedName("markers")
        private List<MarkersBean> markers;
        @SerializedName("reports")
        private List<?> reports;

        protected ListBean(Parcel in) {
            id = in.readString();
            tripId = in.readString();
            refStartpointId = in.readString();
            refEndpointId = in.readString();
            tripName = in.readString();
            tripDescription = in.readString();
            beginTime = in.readString();
            endTime = in.readString();
            creationDate = in.readString();
            updationDate = in.readString();
            startPoint = in.readParcelable(StartPointBean.class.getClassLoader());
            endPoint = in.readParcelable(EndPointBean.class.getClassLoader());
            friendShared = in.readString();
            friendAttend = in.readString();
            tripJson = in.readString();
            wayPoints = in.createTypedArrayList(WayPointsBean.CREATOR);
            markers = in.createTypedArrayList(MarkersBean.CREATOR);
        }

        public static final Creator<ListBean> CREATOR = new Creator<ListBean>() {
            @Override
            public ListBean createFromParcel(Parcel in) {
                return new ListBean(in);
            }

            @Override
            public ListBean[] newArray(int size) {
                return new ListBean[size];
            }
        };

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getTripId() {
            return tripId;
        }

        public void setTripId(String tripId) {
            this.tripId = tripId;
        }

        public String getRefStartpointId() {
            return refStartpointId;
        }

        public void setRefStartpointId(String refStartpointId) {
            this.refStartpointId = refStartpointId;
        }

        public String getRefEndpointId() {
            return refEndpointId;
        }

        public void setRefEndpointId(String refEndpointId) {
            this.refEndpointId = refEndpointId;
        }

        public String getTripName() {
            return tripName;
        }

        public void setTripName(String tripName) {
            this.tripName = tripName;
        }

        public String getTripDescription() {
            return tripDescription;
        }

        public void setTripDescription(String tripDescription) {
            this.tripDescription = tripDescription;
        }

        public String getBeginTime() {
            return beginTime;
        }

        public void setBeginTime(String beginTime) {
            this.beginTime = beginTime;
        }

        public String getEndTime() {
            return endTime;
        }

        public void setEndTime(String endTime) {
            this.endTime = endTime;
        }

        public String getCreationDate() {
            return creationDate;
        }

        public void setCreationDate(String creationDate) {
            this.creationDate = creationDate;
        }

        public String getUpdationDate() {
            return updationDate;
        }

        public void setUpdationDate(String updationDate) {
            this.updationDate = updationDate;
        }

        public StartPointBean getStartPoint() {
            return startPoint;
        }

        public void setStartPoint(StartPointBean startPoint) {
            this.startPoint = startPoint;
        }

        public EndPointBean getEndPoint() {
            return endPoint;
        }

        public void setEndPoint(EndPointBean endPoint) {
            this.endPoint = endPoint;
        }

        public String getFriendShared() {
            return friendShared;
        }

        public void setFriendShared(String friendShared) {
            this.friendShared = friendShared;
        }

        public String getFriendAttend() {
            return friendAttend;
        }

        public void setFriendAttend(String friendAttend) {
            this.friendAttend = friendAttend;
        }

        public String getTripJson() {
            return tripJson;
        }

        public void setTripJson(String tripJson) {
            this.tripJson = tripJson;
        }

        public List<WayPointsBean> getWayPoints() {
            return wayPoints;
        }

        public void setWayPoints(List<WayPointsBean> wayPoints) {
            this.wayPoints = wayPoints;
        }

        public List<?> getPoints() {
            return points;
        }

        public void setPoints(List<?> points) {
            this.points = points;
        }

        public List<MarkersBean> getMarkers() {
            return markers;
        }

        public void setMarkers(List<MarkersBean> markers) {
            this.markers = markers;
        }

        public List<?> getReports() {
            return reports;
        }

        public void setReports(List<?> reports) {
            this.reports = reports;
        }

        @Override
        public int describeContents() {
            return 0;
        }

        @Override
        public void writeToParcel(Parcel dest, int flags) {
            dest.writeString(id);
            dest.writeString(tripId);
            dest.writeString(refStartpointId);
            dest.writeString(refEndpointId);
            dest.writeString(tripName);
            dest.writeString(tripDescription);
            dest.writeString(beginTime);
            dest.writeString(endTime);
            dest.writeString(creationDate);
            dest.writeString(updationDate);
            dest.writeParcelable(startPoint, flags);
            dest.writeParcelable(endPoint, flags);
            dest.writeString(friendShared);
            dest.writeString(friendAttend);
            dest.writeString(tripJson);
            dest.writeTypedList(wayPoints);
            dest.writeTypedList(markers);
        }

        public static class StartPointBean implements Parcelable {
            /**
             * id : 3133
             * refTripId : 414
             * lat : 23.810331344604
             * long : 90.412521362305
             * type : 1
             * address : Dhaka, Bangladesh
             * fullAddress : null
             */

            @SerializedName("id")
            private String id;
            @SerializedName("refTripId")
            private String refTripId;
            @SerializedName("lat")
            private double lat;
            @SerializedName("long")
            private double longX;
            @SerializedName("type")
            private int type;
            @SerializedName("address")
            private String address;
            @SerializedName("fullAddress")
            private String fullAddress;

            protected StartPointBean(Parcel in) {
                id = in.readString();
                refTripId = in.readString();
                lat = in.readDouble();
                longX = in.readDouble();
                type = in.readInt();
                address = in.readString();
            }

            public static final Creator<StartPointBean> CREATOR = new Creator<StartPointBean>() {
                @Override
                public StartPointBean createFromParcel(Parcel in) {
                    return new StartPointBean(in);
                }

                @Override
                public StartPointBean[] newArray(int size) {
                    return new StartPointBean[size];
                }
            };

            public String getId() {
                return id;
            }

            public void setId(String id) {
                this.id = id;
            }

            public String getRefTripId() {
                return refTripId;
            }

            public void setRefTripId(String refTripId) {
                this.refTripId = refTripId;
            }

            public double getLat() {
                return lat;
            }

            public void setLat(double lat) {
                this.lat = lat;
            }

            public double getLongX() {
                return longX;
            }

            public void setLongX(double longX) {
                this.longX = longX;
            }

            public int getType() {
                return type;
            }

            public void setType(int type) {
                this.type = type;
            }

            public String getAddress() {
                return address;
            }

            public void setAddress(String address) {
                this.address = address;
            }

            public String getFullAddress() {
                return fullAddress;
            }

            public void setFullAddress(String fullAddress) {
                this.fullAddress = fullAddress;
            }

            @Override
            public int describeContents() {
                return 0;
            }

            @Override
            public void writeToParcel(Parcel dest, int flags) {
                dest.writeString(id);
                dest.writeString(refTripId);
                dest.writeDouble(lat);
                dest.writeDouble(longX);
                dest.writeInt(type);
                dest.writeString(address);
            }
        }

        public static class EndPointBean implements Parcelable {
            /**
             * id : 3134
             * refTripId : 414
             * lat : 22.356851577759
             * long : 91.783180236816
             * type : 1
             * address : Chittagong, Bangladesh
             * fullAddress : null
             */

            @SerializedName("id")
            private String id;
            @SerializedName("refTripId")
            private String refTripId;
            @SerializedName("lat")
            private double lat;
            @SerializedName("long")
            private double longX;
            @SerializedName("type")
            private int type;
            @SerializedName("address")
            private String address;
            @SerializedName("fullAddress")
            private String fullAddress;

            protected EndPointBean(Parcel in) {
                id = in.readString();
                refTripId = in.readString();
                lat = in.readDouble();
                longX = in.readDouble();
                type = in.readInt();
                address = in.readString();
            }

            public static final Creator<EndPointBean> CREATOR = new Creator<EndPointBean>() {
                @Override
                public EndPointBean createFromParcel(Parcel in) {
                    return new EndPointBean(in);
                }

                @Override
                public EndPointBean[] newArray(int size) {
                    return new EndPointBean[size];
                }
            };

            public String getId() {
                return id;
            }

            public void setId(String id) {
                this.id = id;
            }

            public String getRefTripId() {
                return refTripId;
            }

            public void setRefTripId(String refTripId) {
                this.refTripId = refTripId;
            }

            public double getLat() {
                return lat;
            }

            public void setLat(double lat) {
                this.lat = lat;
            }

            public double getLongX() {
                return longX;
            }

            public void setLongX(double longX) {
                this.longX = longX;
            }

            public int getType() {
                return type;
            }

            public void setType(int type) {
                this.type = type;
            }

            public String getAddress() {
                return address;
            }

            public void setAddress(String address) {
                this.address = address;
            }

            public String getFullAddress() {
                return fullAddress;
            }

            public void setFullAddress(String fullAddress) {
                this.fullAddress = fullAddress;
            }

            @Override
            public int describeContents() {
                return 0;
            }

            @Override
            public void writeToParcel(Parcel dest, int flags) {
                dest.writeString(id);
                dest.writeString(refTripId);
                dest.writeDouble(lat);
                dest.writeDouble(longX);
                dest.writeInt(type);
                dest.writeString(address);
            }
        }

        public static class WayPointsBean implements Parcelable {
            /**
             * id : 89
             * refTripId : 26
             * lat : 23.818939208984
             * long : 90.460838317871
             * type : 1
             * address : Unnamed Road, Dhaka, Bangladesh
             * fullAddress : Unnamed Road, Dhaka, Bangladesh,Dhaka,Bangladesh
             */

            @SerializedName("id")
            private String id;
            @SerializedName("refTripId")
            private String refTripId;
            @SerializedName("lat")
            private double lat;
            @SerializedName("long")
            private double longX;
            @SerializedName("type")
            private int type;
            @SerializedName("address")
            private String address;
            @SerializedName("fullAddress")
            private String fullAddress;

            protected WayPointsBean(Parcel in) {
                id = in.readString();
                refTripId = in.readString();
                lat = in.readDouble();
                longX = in.readDouble();
                type = in.readInt();
                address = in.readString();
                fullAddress = in.readString();
            }

            public static final Creator<WayPointsBean> CREATOR = new Creator<WayPointsBean>() {
                @Override
                public WayPointsBean createFromParcel(Parcel in) {
                    return new WayPointsBean(in);
                }

                @Override
                public WayPointsBean[] newArray(int size) {
                    return new WayPointsBean[size];
                }
            };

            public String getId() {
                return id;
            }

            public void setId(String id) {
                this.id = id;
            }

            public String getRefTripId() {
                return refTripId;
            }

            public void setRefTripId(String refTripId) {
                this.refTripId = refTripId;
            }

            public double getLat() {
                return lat;
            }

            public void setLat(double lat) {
                this.lat = lat;
            }

            public double getLongX() {
                return longX;
            }

            public void setLongX(double longX) {
                this.longX = longX;
            }

            public int getType() {
                return type;
            }

            public void setType(int type) {
                this.type = type;
            }

            public String getAddress() {
                return address;
            }

            public void setAddress(String address) {
                this.address = address;
            }

            public String getFullAddress() {
                return fullAddress;
            }

            public void setFullAddress(String fullAddress) {
                this.fullAddress = fullAddress;
            }

            @Override
            public int describeContents() {
                return 0;
            }

            @Override
            public void writeToParcel(Parcel dest, int flags) {
                dest.writeString(id);
                dest.writeString(refTripId);
                dest.writeDouble(lat);
                dest.writeDouble(longX);
                dest.writeInt(type);
                dest.writeString(address);
                dest.writeString(fullAddress);
            }
        }


        public static class MarkersBean implements Parcelable{
            /**
             * id : 2350
             * userId : 6
             * refTripId : 414
             * markType : 4
             * lat : 23.81069198
             * long : 90.41236715
             * radius : 0
             * address : 517/3 Lane - 10, Dhaka, Bangladesh
             * fullAddress : 517/3 Lane - 10, Dhaka, Bangladesh,Dhaka,Bangladesh
             * description : demo
             * tripSpecific : 1
             * landmarkImage : []
             * locations : [{"lat":23.81069198,"long":90.41236715},{"lat":23.81001978,"long":90.41228056},{"lat":23.81017638,"long":90.41345178}]
             */

            @SerializedName("id")
            private String id;
            @SerializedName("userId")
            private String userId;
            @SerializedName("refTripId")
            private String refTripId;
            @SerializedName("markType")
            private int markType;
            @SerializedName("lat")
            private double lat;
            @SerializedName("long")
            private double longX;
            @SerializedName("radius")
            private int radius;
            @SerializedName("address")
            private String address;
            @SerializedName("fullAddress")
            private String fullAddress;
            @SerializedName("description")
            private String description;
            @SerializedName("tripSpecific")
            private int tripSpecific;
            @SerializedName("landmarkImage")
            private List<?> landmarkImage;
            @SerializedName("locations")
            private List<LocationsBean> locations;

            protected MarkersBean(Parcel in) {
                id = in.readString();
                userId = in.readString();
                refTripId = in.readString();
                markType = in.readInt();
                lat = in.readDouble();
                longX = in.readDouble();
                radius = in.readInt();
                address = in.readString();
                fullAddress = in.readString();
                description = in.readString();
                tripSpecific = in.readInt();
                locations = in.createTypedArrayList(LocationsBean.CREATOR);
            }

            public static final Creator<MarkersBean> CREATOR = new Creator<MarkersBean>() {
                @Override
                public MarkersBean createFromParcel(Parcel in) {
                    return new MarkersBean(in);
                }

                @Override
                public MarkersBean[] newArray(int size) {
                    return new MarkersBean[size];
                }
            };

            public String getId() {
                return id;
            }

            public void setId(String id) {
                this.id = id;
            }

            public String getUserId() {
                return userId;
            }

            public void setUserId(String userId) {
                this.userId = userId;
            }

            public String getRefTripId() {
                return refTripId;
            }

            public void setRefTripId(String refTripId) {
                this.refTripId = refTripId;
            }

            public int getMarkType() {
                return markType;
            }

            public void setMarkType(int markType) {
                this.markType = markType;
            }

            public double getLat() {
                return lat;
            }

            public void setLat(double lat) {
                this.lat = lat;
            }

            public double getLongX() {
                return longX;
            }

            public void setLongX(double longX) {
                this.longX = longX;
            }

            public int getRadius() {
                return radius;
            }

            public void setRadius(int radius) {
                this.radius = radius;
            }

            public String getAddress() {
                return address;
            }

            public void setAddress(String address) {
                this.address = address;
            }

            public String getFullAddress() {
                return fullAddress;
            }

            public void setFullAddress(String fullAddress) {
                this.fullAddress = fullAddress;
            }

            public String getDescription() {
                return description;
            }

            public void setDescription(String description) {
                this.description = description;
            }

            public int getTripSpecific() {
                return tripSpecific;
            }

            public void setTripSpecific(int tripSpecific) {
                this.tripSpecific = tripSpecific;
            }

            public List<?> getLandmarkImage() {
                return landmarkImage;
            }

            public void setLandmarkImage(List<?> landmarkImage) {
                this.landmarkImage = landmarkImage;
            }

            public List<LocationsBean> getLocations() {
                return locations;
            }

            public void setLocations(List<LocationsBean> locations) {
                this.locations = locations;
            }

            @Override
            public int describeContents() {
                return 0;
            }

            @Override
            public void writeToParcel(Parcel dest, int flags) {
                dest.writeString(id);
                dest.writeString(userId);
                dest.writeString(refTripId);
                dest.writeInt(markType);
                dest.writeDouble(lat);
                dest.writeDouble(longX);
                dest.writeInt(radius);
                dest.writeString(address);
                dest.writeString(fullAddress);
                dest.writeString(description);
                dest.writeInt(tripSpecific);
                dest.writeTypedList(locations);
            }

            public static class LocationsBean implements Parcelable {
                /**
                 * lat : 23.81069198
                 * long : 90.41236715
                 */

                @SerializedName("lat")
                private double lat;
                @SerializedName("long")
                private double longX;

                protected LocationsBean(Parcel in) {
                    lat = in.readDouble();
                    longX = in.readDouble();
                }

                public static final Creator<LocationsBean> CREATOR = new Creator<LocationsBean>() {
                    @Override
                    public LocationsBean createFromParcel(Parcel in) {
                        return new LocationsBean(in);
                    }

                    @Override
                    public LocationsBean[] newArray(int size) {
                        return new LocationsBean[size];
                    }
                };

                public double getLat() {
                    return lat;
                }

                public void setLat(double lat) {
                    this.lat = lat;
                }

                public double getLongX() {
                    return longX;
                }

                public void setLongX(double longX) {
                    this.longX = longX;
                }

                @Override
                public int describeContents() {
                    return 0;
                }

                @Override
                public void writeToParcel(Parcel dest, int flags) {
                    dest.writeDouble(lat);
                    dest.writeDouble(longX);
                }
            }
        }
    }
}
